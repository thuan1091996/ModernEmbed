
fw_wle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004980  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c5c  08004c5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c64  08004c64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c64  08004c64  00014c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08004cdc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08004cdc  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103c5  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000236b  00000000  00000000  0003045f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  000327d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00033728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dc6  00000000  00000000  000345b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de62  00000000  00000000  0004e37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ee47  00000000  00000000  0005c1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb027  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004580  00000000  00000000  000fb07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000070 	.word	0x20000070
 8000154:	00000000 	.word	0x00000000
 8000158:	08004aa0 	.word	0x08004aa0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000074 	.word	0x20000074
 8000174:	08004aa0 	.word	0x08004aa0

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b96c 	b.w	8000468 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	468e      	mov	lr, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	f040 8082 	bne.w	80002be <__udivmoddi4+0x116>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4617      	mov	r7, r2
 80001be:	d946      	bls.n	800024e <__udivmoddi4+0xa6>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c6:	f1c2 0120 	rsb	r1, r2, #32
 80001ca:	fa05 f302 	lsl.w	r3, r5, r2
 80001ce:	fa20 f101 	lsr.w	r1, r0, r1
 80001d2:	4097      	lsls	r7, r2
 80001d4:	ea41 0e03 	orr.w	lr, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbbe fcf8 	udiv	ip, lr, r8
 80001e4:	b2b9      	uxth	r1, r7
 80001e6:	fb08 ee1c 	mls	lr, r8, ip, lr
 80001ea:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80001ee:	fb0c f001 	mul.w	r0, ip, r1
 80001f2:	4298      	cmp	r0, r3
 80001f4:	d90a      	bls.n	800020c <__udivmoddi4+0x64>
 80001f6:	18fb      	adds	r3, r7, r3
 80001f8:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 80001fc:	f080 8116 	bcs.w	800042c <__udivmoddi4+0x284>
 8000200:	4298      	cmp	r0, r3
 8000202:	f240 8113 	bls.w	800042c <__udivmoddi4+0x284>
 8000206:	f1ac 0c02 	sub.w	ip, ip, #2
 800020a:	443b      	add	r3, r7
 800020c:	1a1b      	subs	r3, r3, r0
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0f8 	udiv	r0, r3, r8
 8000214:	fb08 3310 	mls	r3, r8, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 f101 	mul.w	r1, r0, r1
 8000220:	42a1      	cmp	r1, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x90>
 8000224:	193c      	adds	r4, r7, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800022a:	f080 8101 	bcs.w	8000430 <__udivmoddi4+0x288>
 800022e:	42a1      	cmp	r1, r4
 8000230:	f240 80fe 	bls.w	8000430 <__udivmoddi4+0x288>
 8000234:	3802      	subs	r0, #2
 8000236:	443c      	add	r4, r7
 8000238:	1a64      	subs	r4, r4, r1
 800023a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800023e:	2100      	movs	r1, #0
 8000240:	b11e      	cbz	r6, 800024a <__udivmoddi4+0xa2>
 8000242:	40d4      	lsrs	r4, r2
 8000244:	2300      	movs	r3, #0
 8000246:	e9c6 4300 	strd	r4, r3, [r6]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	b902      	cbnz	r2, 8000252 <__udivmoddi4+0xaa>
 8000250:	deff      	udf	#255	; 0xff
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	2a00      	cmp	r2, #0
 8000258:	d14f      	bne.n	80002fa <__udivmoddi4+0x152>
 800025a:	1bcb      	subs	r3, r1, r7
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f f887 	uxth.w	r8, r7
 8000264:	2101      	movs	r1, #1
 8000266:	fbb3 fcfe 	udiv	ip, r3, lr
 800026a:	0c25      	lsrs	r5, r4, #16
 800026c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000270:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000274:	fb08 f30c 	mul.w	r3, r8, ip
 8000278:	42ab      	cmp	r3, r5
 800027a:	d907      	bls.n	800028c <__udivmoddi4+0xe4>
 800027c:	197d      	adds	r5, r7, r5
 800027e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000282:	d202      	bcs.n	800028a <__udivmoddi4+0xe2>
 8000284:	42ab      	cmp	r3, r5
 8000286:	f200 80e7 	bhi.w	8000458 <__udivmoddi4+0x2b0>
 800028a:	4684      	mov	ip, r0
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a3      	uxth	r3, r4
 8000290:	fbb5 f0fe 	udiv	r0, r5, lr
 8000294:	fb0e 5510 	mls	r5, lr, r0, r5
 8000298:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	45a0      	cmp	r8, r4
 80002a2:	d907      	bls.n	80002b4 <__udivmoddi4+0x10c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	d202      	bcs.n	80002b2 <__udivmoddi4+0x10a>
 80002ac:	45a0      	cmp	r8, r4
 80002ae:	f200 80d7 	bhi.w	8000460 <__udivmoddi4+0x2b8>
 80002b2:	4618      	mov	r0, r3
 80002b4:	eba4 0408 	sub.w	r4, r4, r8
 80002b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002bc:	e7c0      	b.n	8000240 <__udivmoddi4+0x98>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80af 	beq.w	8000426 <__udivmoddi4+0x27e>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d14b      	bne.n	8000374 <__udivmoddi4+0x1cc>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0x13e>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80b7 	bhi.w	8000454 <__udivmoddi4+0x2ac>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0303 	sbc.w	r3, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	469e      	mov	lr, r3
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0aa      	beq.n	800024a <__udivmoddi4+0xa2>
 80002f4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002f8:	e7a7      	b.n	800024a <__udivmoddi4+0xa2>
 80002fa:	f1c2 0c20 	rsb	ip, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	4097      	lsls	r7, r2
 8000304:	fa20 f00c 	lsr.w	r0, r0, ip
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000310:	4318      	orrs	r0, r3
 8000312:	fbbc f1fe 	udiv	r1, ip, lr
 8000316:	0c05      	lsrs	r5, r0, #16
 8000318:	fb0e cc11 	mls	ip, lr, r1, ip
 800031c:	fa1f f887 	uxth.w	r8, r7
 8000320:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000324:	fb01 f308 	mul.w	r3, r1, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	fa04 f402 	lsl.w	r4, r4, r2
 800032e:	d909      	bls.n	8000344 <__udivmoddi4+0x19c>
 8000330:	197d      	adds	r5, r7, r5
 8000332:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000336:	f080 808b 	bcs.w	8000450 <__udivmoddi4+0x2a8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	f240 8088 	bls.w	8000450 <__udivmoddi4+0x2a8>
 8000340:	3902      	subs	r1, #2
 8000342:	443d      	add	r5, r7
 8000344:	1aeb      	subs	r3, r5, r3
 8000346:	b285      	uxth	r5, r0
 8000348:	fbb3 f0fe 	udiv	r0, r3, lr
 800034c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000350:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000354:	fb00 f308 	mul.w	r3, r0, r8
 8000358:	42ab      	cmp	r3, r5
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x1c4>
 800035c:	197d      	adds	r5, r7, r5
 800035e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000362:	d271      	bcs.n	8000448 <__udivmoddi4+0x2a0>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d96f      	bls.n	8000448 <__udivmoddi4+0x2a0>
 8000368:	3802      	subs	r0, #2
 800036a:	443d      	add	r5, r7
 800036c:	1aeb      	subs	r3, r5, r3
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	e778      	b.n	8000266 <__udivmoddi4+0xbe>
 8000374:	f1c1 0c20 	rsb	ip, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 f70c 	lsr.w	r7, r2, ip
 800037e:	431f      	orrs	r7, r3
 8000380:	fa20 f40c 	lsr.w	r4, r0, ip
 8000384:	fa05 f301 	lsl.w	r3, r5, r1
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa25 f50c 	lsr.w	r5, r5, ip
 8000390:	431c      	orrs	r4, r3
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fbb5 f9fe 	udiv	r9, r5, lr
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	fb0e 5519 	mls	r5, lr, r9, r5
 80003a0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80003a4:	fb09 fa08 	mul.w	sl, r9, r8
 80003a8:	45aa      	cmp	sl, r5
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f301 	lsl.w	r3, r0, r1
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x21e>
 80003b4:	197d      	adds	r5, r7, r5
 80003b6:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003ba:	d247      	bcs.n	800044c <__udivmoddi4+0x2a4>
 80003bc:	45aa      	cmp	sl, r5
 80003be:	d945      	bls.n	800044c <__udivmoddi4+0x2a4>
 80003c0:	f1a9 0902 	sub.w	r9, r9, #2
 80003c4:	443d      	add	r5, r7
 80003c6:	eba5 050a 	sub.w	r5, r5, sl
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb5 f0fe 	udiv	r0, r5, lr
 80003d0:	fb0e 5510 	mls	r5, lr, r0, r5
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb00 f808 	mul.w	r8, r0, r8
 80003dc:	45a0      	cmp	r8, r4
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x248>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003e6:	d22d      	bcs.n	8000444 <__udivmoddi4+0x29c>
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d92b      	bls.n	8000444 <__udivmoddi4+0x29c>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f4:	eba4 0408 	sub.w	r4, r4, r8
 80003f8:	fba0 8902 	umull	r8, r9, r0, r2
 80003fc:	454c      	cmp	r4, r9
 80003fe:	46c6      	mov	lr, r8
 8000400:	464d      	mov	r5, r9
 8000402:	d319      	bcc.n	8000438 <__udivmoddi4+0x290>
 8000404:	d016      	beq.n	8000434 <__udivmoddi4+0x28c>
 8000406:	b15e      	cbz	r6, 8000420 <__udivmoddi4+0x278>
 8000408:	ebb3 020e 	subs.w	r2, r3, lr
 800040c:	eb64 0405 	sbc.w	r4, r4, r5
 8000410:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000414:	40ca      	lsrs	r2, r1
 8000416:	ea4c 0202 	orr.w	r2, ip, r2
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c6 2400 	strd	r2, r4, [r6]
 8000420:	2100      	movs	r1, #0
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e70e      	b.n	800024a <__udivmoddi4+0xa2>
 800042c:	46ac      	mov	ip, r5
 800042e:	e6ed      	b.n	800020c <__udivmoddi4+0x64>
 8000430:	4618      	mov	r0, r3
 8000432:	e701      	b.n	8000238 <__udivmoddi4+0x90>
 8000434:	4543      	cmp	r3, r8
 8000436:	d2e6      	bcs.n	8000406 <__udivmoddi4+0x25e>
 8000438:	ebb8 0e02 	subs.w	lr, r8, r2
 800043c:	eb69 0507 	sbc.w	r5, r9, r7
 8000440:	3801      	subs	r0, #1
 8000442:	e7e0      	b.n	8000406 <__udivmoddi4+0x25e>
 8000444:	4628      	mov	r0, r5
 8000446:	e7d3      	b.n	80003f0 <__udivmoddi4+0x248>
 8000448:	4660      	mov	r0, ip
 800044a:	e78f      	b.n	800036c <__udivmoddi4+0x1c4>
 800044c:	4681      	mov	r9, r0
 800044e:	e7ba      	b.n	80003c6 <__udivmoddi4+0x21e>
 8000450:	4661      	mov	r1, ip
 8000452:	e777      	b.n	8000344 <__udivmoddi4+0x19c>
 8000454:	4608      	mov	r0, r1
 8000456:	e74b      	b.n	80002f0 <__udivmoddi4+0x148>
 8000458:	f1ac 0c02 	sub.w	ip, ip, #2
 800045c:	443d      	add	r5, r7
 800045e:	e715      	b.n	800028c <__udivmoddi4+0xe4>
 8000460:	3802      	subs	r0, #2
 8000462:	443c      	add	r4, r7
 8000464:	e726      	b.n	80002b4 <__udivmoddi4+0x10c>
 8000466:	bf00      	nop

08000468 <__aeabi_idiv0>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000478:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800047a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4013      	ands	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000490:	68fb      	ldr	r3, [r7, #12]
}
 8000492:	bf00      	nop
 8000494:	3714      	adds	r7, #20
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 fb1a 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f80e 	bl	80004c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 f8aa 	bl	8000600 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ac:	f000 f85c 	bl	8000568 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPS_EN_GPIO_Port, GPS_EN_Pin, GPIO_PIN_SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2101      	movs	r1, #1
 80004b4:	4802      	ldr	r0, [pc, #8]	; (80004c0 <main+0x24>)
 80004b6:	f000 feb9 	bl	800122c <HAL_GPIO_WritePin>
  GPS_FWTest();
 80004ba:	f000 f943 	bl	8000744 <GPS_FWTest>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004be:	e7fe      	b.n	80004be <main+0x22>
 80004c0:	48000400 	.word	0x48000400

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b09a      	sub	sp, #104	; 0x68
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	f107 0320 	add.w	r3, r7, #32
 80004ce:	2248      	movs	r2, #72	; 0x48
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f003 fe18 	bl	8004108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d8:	f107 0308 	add.w	r3, r7, #8
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <SystemClock_Config+0xa0>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80004f2:	4a1c      	ldr	r2, [pc, #112]	; (8000564 <SystemClock_Config+0xa0>)
 80004f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f8:	6013      	str	r3, [r2, #0]
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <SystemClock_Config+0xa0>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000506:	2320      	movs	r3, #32
 8000508:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800050a:	2301      	movs	r3, #1
 800050c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800050e:	2300      	movs	r3, #0
 8000510:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000512:	2360      	movs	r3, #96	; 0x60
 8000514:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000516:	2300      	movs	r3, #0
 8000518:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	4618      	mov	r0, r3
 8000520:	f001 f946 	bl	80017b0 <HAL_RCC_OscConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800052a:	f000 f931 	bl	8000790 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800052e:	234f      	movs	r3, #79	; 0x4f
 8000530:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f001 fcc9 	bl	8001ee4 <HAL_RCC_ClockConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000558:	f000 f91a 	bl	8000790 <Error_Handler>
  }
}
 800055c:	bf00      	nop
 800055e:	3768      	adds	r7, #104	; 0x68
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	58000400 	.word	0x58000400

08000568 <MX_USART1_UART_Init>:


void MX_USART1_UART_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 800056e:	4a23      	ldr	r2, [pc, #140]	; (80005fc <MX_USART1_UART_Init+0x94>)
 8000570:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000572:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 8000574:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000578:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000580:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000586:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 800058e:	220c      	movs	r2, #12
 8000590:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005b0:	4811      	ldr	r0, [pc, #68]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 80005b2:	f002 f978 	bl	80028a6 <HAL_UART_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80005bc:	f000 f8e8 	bl	8000790 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005c0:	2100      	movs	r1, #0
 80005c2:	480d      	ldr	r0, [pc, #52]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 80005c4:	f003 fca0 	bl	8003f08 <HAL_UARTEx_SetTxFifoThreshold>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80005ce:	f000 f8df 	bl	8000790 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005d2:	2100      	movs	r1, #0
 80005d4:	4808      	ldr	r0, [pc, #32]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 80005d6:	f003 fcd5 	bl	8003f84 <HAL_UARTEx_SetRxFifoThreshold>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80005e0:	f000 f8d6 	bl	8000790 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MX_USART1_UART_Init+0x90>)
 80005e6:	f003 fc57 	bl	8003e98 <HAL_UARTEx_DisableFifoMode>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80005f0:	f000 f8ce 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200000fc 	.word	0x200000fc
 80005fc:	40013800 	.word	0x40013800

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000614:	2002      	movs	r0, #2
 8000616:	f7ff ff29 	bl	800046c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_EN_GPIO_Port, GPS_EN_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	480a      	ldr	r0, [pc, #40]	; (8000648 <MX_GPIO_Init+0x48>)
 8000620:	f000 fe04 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPS_EN_Pin */
  GPIO_InitStruct.Pin = GPS_EN_Pin;
 8000624:	2301      	movs	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800062c:	2302      	movs	r3, #2
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4619      	mov	r1, r3
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <MX_GPIO_Init+0x48>)
 800063a:	f000 fbc9 	bl	8000dd0 <HAL_GPIO_Init>

}
 800063e:	bf00      	nop
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	48000400 	.word	0x48000400

0800064c <GPS_Settings>:


uint8_t g_gps_datarecv[MAX_LEN_GPS]={0};

bool GPS_Settings(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
	uint8_t data_recv=0;
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]
	uint8_t gps_dataindex=0;
 8000656:	2300      	movs	r3, #0
 8000658:	77fb      	strb	r3, [r7, #31]
	uint8_t max_retry = 3;
 800065a:	2303      	movs	r3, #3
 800065c:	75fb      	strb	r3, [r7, #23]
	uint8_t expected_respond[]="PMTK001,314";
 800065e:	4a34      	ldr	r2, [pc, #208]	; (8000730 <GPS_Settings+0xe4>)
 8000660:	463b      	mov	r3, r7
 8000662:	ca07      	ldmia	r2, {r0, r1, r2}
 8000664:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t respond_len=sizeof(expected_respond)-1;
 8000668:	230b      	movs	r3, #11
 800066a:	75bb      	strb	r3, [r7, #22]
	for (int count = 0; count < max_retry; ++count)		//Retry in case unsuccessful communication
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	e054      	b.n	800071c <GPS_Settings+0xd0>
	{
		uint32_t cur_time = HAL_GetTick();
 8000672:	f000 fa9d 	bl	8000bb0 <HAL_GetTick>
 8000676:	6138      	str	r0, [r7, #16]
		printf("Data sent to module GPS: \n");
 8000678:	482e      	ldr	r0, [pc, #184]	; (8000734 <GPS_Settings+0xe8>)
 800067a:	f003 fdbb 	bl	80041f4 <puts>
		if(HAL_UART_Transmit(&huart1, (uint8_t*)PMTK_SET_NMEA_OUTPUT_GGAONLY, strlen( PMTK_SET_NMEA_OUTPUT_GGAONLY), UART_TIMEOUT) == HAL_OK)
 800067e:	2364      	movs	r3, #100	; 0x64
 8000680:	2233      	movs	r2, #51	; 0x33
 8000682:	492d      	ldr	r1, [pc, #180]	; (8000738 <GPS_Settings+0xec>)
 8000684:	482d      	ldr	r0, [pc, #180]	; (800073c <GPS_Settings+0xf0>)
 8000686:	f002 f99a 	bl	80029be <HAL_UART_Transmit>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d13d      	bne.n	800070c <GPS_Settings+0xc0>
		{
			gps_dataindex = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	77fb      	strb	r3, [r7, #31]
			do
			{
				if (HAL_UART_Receive_IT(&huart1, &data_recv, 1) == HAL_OK)
 8000694:	f107 030f 	add.w	r3, r7, #15
 8000698:	2201      	movs	r2, #1
 800069a:	4619      	mov	r1, r3
 800069c:	4827      	ldr	r0, [pc, #156]	; (800073c <GPS_Settings+0xf0>)
 800069e:	f002 fa25 	bl	8002aec <HAL_UART_Receive_IT>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10c      	bne.n	80006c2 <GPS_Settings+0x76>
				{
					if(data_recv == '$') 	gps_dataindex = 0;
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b24      	cmp	r3, #36	; 0x24
 80006ac:	d102      	bne.n	80006b4 <GPS_Settings+0x68>
 80006ae:	2300      	movs	r3, #0
 80006b0:	77fb      	strb	r3, [r7, #31]
 80006b2:	e006      	b.n	80006c2 <GPS_Settings+0x76>
					else
					{
						g_gps_datarecv[gps_dataindex++] = data_recv;
 80006b4:	7ffb      	ldrb	r3, [r7, #31]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	77fa      	strb	r2, [r7, #31]
 80006ba:	461a      	mov	r2, r3
 80006bc:	7bf9      	ldrb	r1, [r7, #15]
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <GPS_Settings+0xf4>)
 80006c0:	5499      	strb	r1, [r3, r2]
					}
				}
			}
			while( (g_gps_datarecv[gps_dataindex-1] != '\r') && (g_gps_datarecv[gps_dataindex] != '\n')
 80006c2:	7ffb      	ldrb	r3, [r7, #31]
 80006c4:	3b01      	subs	r3, #1
 80006c6:	4a1e      	ldr	r2, [pc, #120]	; (8000740 <GPS_Settings+0xf4>)
 80006c8:	5cd3      	ldrb	r3, [r2, r3]
					&& (HAL_GetTick() <= cur_time + 3000) );
 80006ca:	2b0d      	cmp	r3, #13
 80006cc:	d00c      	beq.n	80006e8 <GPS_Settings+0x9c>
			while( (g_gps_datarecv[gps_dataindex-1] != '\r') && (g_gps_datarecv[gps_dataindex] != '\n')
 80006ce:	7ffb      	ldrb	r3, [r7, #31]
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <GPS_Settings+0xf4>)
 80006d2:	5cd3      	ldrb	r3, [r2, r3]
 80006d4:	2b0a      	cmp	r3, #10
 80006d6:	d007      	beq.n	80006e8 <GPS_Settings+0x9c>
					&& (HAL_GetTick() <= cur_time + 3000) );
 80006d8:	f000 fa6a 	bl	8000bb0 <HAL_GetTick>
 80006dc:	4602      	mov	r2, r0
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d9d5      	bls.n	8000694 <GPS_Settings+0x48>

			if ( memcmp(g_gps_datarecv, expected_respond, respond_len) == 0)
 80006e8:	7dba      	ldrb	r2, [r7, #22]
 80006ea:	463b      	mov	r3, r7
 80006ec:	4619      	mov	r1, r3
 80006ee:	4814      	ldr	r0, [pc, #80]	; (8000740 <GPS_Settings+0xf4>)
 80006f0:	f003 fcfc 	bl	80040ec <memcmp>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d108      	bne.n	800070c <GPS_Settings+0xc0>
			{
				#if DEBUG_CONSOLE
				printf("Data recv GPS:  %s \n", g_gps_datarecv);
				#else
				HAL_UART_Transmit(&huart1, g_gps_datarecv, gps_dataindex, 100);
 80006fa:	7ffb      	ldrb	r3, [r7, #31]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	2364      	movs	r3, #100	; 0x64
 8000700:	490f      	ldr	r1, [pc, #60]	; (8000740 <GPS_Settings+0xf4>)
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <GPS_Settings+0xf0>)
 8000704:	f002 f95b 	bl	80029be <HAL_UART_Transmit>
				#endif  /* End of DEBUG_CONSOLE */
				return true;
 8000708:	2301      	movs	r3, #1
 800070a:	e00c      	b.n	8000726 <GPS_Settings+0xda>
			}
		}
		HAL_UART_DeInit(&huart1);
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <GPS_Settings+0xf0>)
 800070e:	f002 f91a 	bl	8002946 <HAL_UART_DeInit>
		MX_USART1_UART_Init();
 8000712:	f7ff ff29 	bl	8000568 <MX_USART1_UART_Init>
	for (int count = 0; count < max_retry; ++count)		//Retry in case unsuccessful communication
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	3301      	adds	r3, #1
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	7dfb      	ldrb	r3, [r7, #23]
 800071e:	69ba      	ldr	r2, [r7, #24]
 8000720:	429a      	cmp	r2, r3
 8000722:	dba6      	blt.n	8000672 <GPS_Settings+0x26>
	}
	return false;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	08004b08 	.word	0x08004b08
 8000734:	08004ab8 	.word	0x08004ab8
 8000738:	08004ad4 	.word	0x08004ad4
 800073c:	200000fc 	.word	0x200000fc
 8000740:	2000008c 	.word	0x2000008c

08000744 <GPS_FWTest>:

eTestStatus GPS_FWTest(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	GPS_test = false;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <GPS_FWTest+0x44>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
#if GPS_TEST
	HAL_Delay(1000);
 800074e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000752:	f000 fa37 	bl	8000bc4 <HAL_Delay>
	HAL_GPIO_WritePin(GPS_EN_GPIO_Port, GPS_EN_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2101      	movs	r1, #1
 800075a:	480c      	ldr	r0, [pc, #48]	; (800078c <GPS_FWTest+0x48>)
 800075c:	f000 fd66 	bl	800122c <HAL_GPIO_WritePin>
	HAL_Delay(3000);												//Wait for GPS supply power stable
 8000760:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000764:	f000 fa2e 	bl	8000bc4 <HAL_Delay>
	if (GPS_Settings() == true) GPS_test = true;
 8000768:	f7ff ff70 	bl	800064c <GPS_Settings>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d003      	beq.n	800077a <GPS_FWTest+0x36>
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <GPS_FWTest+0x44>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e002      	b.n	8000780 <GPS_FWTest+0x3c>
	else						GPS_test = false;
 800077a:	4b03      	ldr	r3, [pc, #12]	; (8000788 <GPS_FWTest+0x44>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
//	HAL_GPIO_WritePin(GPS_EN_GPIO_Port, GPS_EN_Pin, GPIO_PIN_RESET);
#else
	printf("----- Skipped test ----- \n");
#endif /*End GPS_TEST*/
	return GPS_test;
 8000780:	4b01      	ldr	r3, [pc, #4]	; (8000788 <GPS_FWTest+0x44>)
 8000782:	781b      	ldrb	r3, [r3, #0]
}
 8000784:	4618      	mov	r0, r3
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000018c 	.word	0x2000018c
 800078c:	48000400 	.word	0x48000400

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>

0800079a <LL_AHB2_GRP1_EnableClock>:
{
 800079a:	b480      	push	{r7}
 800079c:	b085      	sub	sp, #20
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4013      	ands	r3, r2
 80007bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007be:	68fb      	ldr	r3, [r7, #12]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b085      	sub	sp, #20
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4313      	orrs	r3, r2
 80007e0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4013      	ands	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr

080007fa <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	43db      	mvns	r3, r3
 800080c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000810:	4013      	ands	r3, r2
 8000812:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
	...

0800082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b096      	sub	sp, #88	; 0x58
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2238      	movs	r2, #56	; 0x38
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f003 fc5b 	bl	8004108 <memset>
  if(huart->Instance==USART1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <HAL_UART_MspInit+0x84>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d125      	bne.n	80008a8 <HAL_UART_MspInit+0x7c>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800085c:	2301      	movs	r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000860:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000864:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fee0 	bl	8002630 <HAL_RCCEx_PeriphCLKConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000876:	f7ff ff8b 	bl	8000790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800087a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800087e:	f7ff ffa4 	bl	80007ca <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2002      	movs	r0, #2
 8000884:	f7ff ff89 	bl	800079a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000888:	23c0      	movs	r3, #192	; 0xc0
 800088a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000898:	2307      	movs	r3, #7
 800089a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008a0:	4619      	mov	r1, r3
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <HAL_UART_MspInit+0x88>)
 80008a4:	f000 fa94 	bl	8000dd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008a8:	bf00      	nop
 80008aa:	3758      	adds	r7, #88	; 0x58
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40013800 	.word	0x40013800
 80008b4:	48000400 	.word	0x48000400

080008b8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_UART_MspDeInit+0x2c>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d107      	bne.n	80008da <HAL_UART_MspDeInit+0x22>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80008ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80008ce:	f7ff ff94 	bl	80007fa <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80008d2:	21c0      	movs	r1, #192	; 0xc0
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <HAL_UART_MspDeInit+0x30>)
 80008d6:	f000 fbdb 	bl	8001090 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40013800 	.word	0x40013800
 80008e8:	48000400 	.word	0x48000400

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr

0800092e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000932:	f000 f92b 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}

0800093a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	e00a      	b.n	8000962 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800094c:	f3af 8000 	nop.w
 8000950:	4601      	mov	r1, r0
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1c5a      	adds	r2, r3, #1
 8000956:	60ba      	str	r2, [r7, #8]
 8000958:	b2ca      	uxtb	r2, r1
 800095a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	429a      	cmp	r2, r3
 8000968:	dbf0      	blt.n	800094c <_read+0x12>
	}

return len;
 800096a:	687b      	ldr	r3, [r7, #4]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e009      	b.n	800099a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	1c5a      	adds	r2, r3, #1
 800098a:	60ba      	str	r2, [r7, #8]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4618      	mov	r0, r3
 8000990:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	3301      	adds	r3, #1
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	429a      	cmp	r2, r3
 80009a0:	dbf1      	blt.n	8000986 <_write+0x12>
	}
	return len;
 80009a2:	687b      	ldr	r3, [r7, #4]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <_close>:

int _close(int file)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	return -1;
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b083      	sub	sp, #12
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d2:	605a      	str	r2, [r3, #4]
	return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <_isatty>:

int _isatty(int file)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	return 1;
 80009e8:	2301      	movs	r3, #1
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
	return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a14:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <_sbrk+0x5c>)
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <_sbrk+0x60>)
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <_sbrk+0x64>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <_sbrk+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d207      	bcs.n	8000a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a3c:	f003 fb2c 	bl	8004098 <__errno>
 8000a40:	4603      	mov	r3, r0
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <_sbrk+0x64>)
 8000a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20010000 	.word	0x20010000
 8000a6c:	00000400 	.word	0x00000400
 8000a70:	200000f0 	.word	0x200000f0
 8000a74:	200001a8 	.word	0x200001a8

08000a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a88:	f7ff fff6 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	; (8000ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	; (8000ad0 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ab2:	f003 faf7 	bl	80040a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ab6:	f7ff fcf1 	bl	800049c <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   r0, =_estack
 8000abc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ac8:	08004c6c 	.word	0x08004c6c
  ldr r2, =_sbss
 8000acc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ad0:	200001a4 	.word	0x200001a4

08000ad4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f000 f942 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000ae8:	f001 fbc0 	bl	800226c <HAL_RCC_GetHCLKFreq>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <HAL_Init+0x3c>)
 8000af0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af2:	200f      	movs	r0, #15
 8000af4:	f000 f810 	bl	8000b18 <HAL_InitTick>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d002      	beq.n	8000b04 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	71fb      	strb	r3, [r7, #7]
 8000b02:	e001      	b.n	8000b08 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b04:	f7ff fe8b 	bl	800081e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000000 	.word	0x20000000

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_InitTick+0x6c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d024      	beq.n	8000b76 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b2c:	f001 fb9e 	bl	800226c <HAL_RCC_GetHCLKFreq>
 8000b30:	4602      	mov	r2, r0
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_InitTick+0x6c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	4619      	mov	r1, r3
 8000b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f936 	bl	8000db6 <HAL_SYSTICK_Config>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10f      	bne.n	8000b70 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	d809      	bhi.n	8000b6a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b56:	2200      	movs	r2, #0
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b5e:	f000 f910 	bl	8000d82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <HAL_InitTick+0x70>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	e007      	b.n	8000b7a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	73fb      	strb	r3, [r7, #15]
 8000b6e:	e004      	b.n	8000b7a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e001      	b.n	8000b7a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x1c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_IncTick+0x20>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a03      	ldr	r2, [pc, #12]	; (8000bac <HAL_IncTick+0x20>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000190 	.word	0x20000190

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <HAL_GetTick+0x10>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	20000190 	.word	0x20000190

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff fff0 	bl	8000bb0 <HAL_GetTick>
 8000bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bea:	bf00      	nop
 8000bec:	f7ff ffe0 	bl	8000bb0 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d4c:	f7ff ff90 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff49 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d90:	f7ff ff60 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	f7ff ff92 	bl	8000cc4 <NVIC_EncodePriority>
 8000da0:	4602      	mov	r2, r0
 8000da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff61 	bl	8000c70 <__NVIC_SetPriority>
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffb2 	bl	8000d28 <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b087      	sub	sp, #28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dde:	e140      	b.n	8001062 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f000 8132 	beq.w	800105c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d005      	beq.n	8000e10 <HAL_GPIO_Init+0x40>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d130      	bne.n	8000e72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e46:	2201      	movs	r2, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	f003 0201 	and.w	r2, r3, #1
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d017      	beq.n	8000eae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d123      	bne.n	8000f02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	691a      	ldr	r2, [r3, #16]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	6939      	ldr	r1, [r7, #16]
 8000efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0203 	and.w	r2, r3, #3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 808c 	beq.w	800105c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f44:	4a4e      	ldr	r2, [pc, #312]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f6e:	d00d      	beq.n	8000f8c <HAL_GPIO_Init+0x1bc>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a44      	ldr	r2, [pc, #272]	; (8001084 <HAL_GPIO_Init+0x2b4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d007      	beq.n	8000f88 <HAL_GPIO_Init+0x1b8>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a43      	ldr	r2, [pc, #268]	; (8001088 <HAL_GPIO_Init+0x2b8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d101      	bne.n	8000f84 <HAL_GPIO_Init+0x1b4>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e004      	b.n	8000f8e <HAL_GPIO_Init+0x1be>
 8000f84:	2307      	movs	r3, #7
 8000f86:	e002      	b.n	8000f8e <HAL_GPIO_Init+0x1be>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <HAL_GPIO_Init+0x1be>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	f002 0203 	and.w	r2, r2, #3
 8000f94:	0092      	lsls	r2, r2, #2
 8000f96:	4093      	lsls	r3, r2
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f9e:	4938      	ldr	r1, [pc, #224]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000fac:	4b37      	ldr	r3, [pc, #220]	; (800108c <HAL_GPIO_Init+0x2bc>)
 8000fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fb2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000fd2:	4a2e      	ldr	r2, [pc, #184]	; (800108c <HAL_GPIO_Init+0x2bc>)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <HAL_GPIO_Init+0x2bc>)
 8000fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fe0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001000:	4a22      	ldr	r2, [pc, #136]	; (800108c <HAL_GPIO_Init+0x2bc>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <HAL_GPIO_Init+0x2bc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800102c:	4a17      	ldr	r2, [pc, #92]	; (800108c <HAL_GPIO_Init+0x2bc>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_GPIO_Init+0x2bc>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001056:	4a0d      	ldr	r2, [pc, #52]	; (800108c <HAL_GPIO_Init+0x2bc>)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	fa22 f303 	lsr.w	r3, r2, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	f47f aeb7 	bne.w	8000de0 <HAL_GPIO_Init+0x10>
  }
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40010000 	.word	0x40010000
 8001084:	48000400 	.word	0x48000400
 8001088:	48000800 	.word	0x48000800
 800108c:	58000800 	.word	0x58000800

08001090 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800109e:	e0af      	b.n	8001200 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80010a0:	2201      	movs	r2, #1
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80a2 	beq.w	80011fa <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80010b6:	4a59      	ldr	r2, [pc, #356]	; (800121c <HAL_GPIO_DeInit+0x18c>)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	2207      	movs	r2, #7
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010de:	d00d      	beq.n	80010fc <HAL_GPIO_DeInit+0x6c>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a4f      	ldr	r2, [pc, #316]	; (8001220 <HAL_GPIO_DeInit+0x190>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d007      	beq.n	80010f8 <HAL_GPIO_DeInit+0x68>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <HAL_GPIO_DeInit+0x194>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d101      	bne.n	80010f4 <HAL_GPIO_DeInit+0x64>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e004      	b.n	80010fe <HAL_GPIO_DeInit+0x6e>
 80010f4:	2307      	movs	r3, #7
 80010f6:	e002      	b.n	80010fe <HAL_GPIO_DeInit+0x6e>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <HAL_GPIO_DeInit+0x6e>
 80010fc:	2300      	movs	r3, #0
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	f002 0203 	and.w	r2, r2, #3
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	4093      	lsls	r3, r2
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	429a      	cmp	r2, r3
 800110c:	d136      	bne.n	800117c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800110e:	4b46      	ldr	r3, [pc, #280]	; (8001228 <HAL_GPIO_DeInit+0x198>)
 8001110:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	43db      	mvns	r3, r3
 8001118:	4943      	ldr	r1, [pc, #268]	; (8001228 <HAL_GPIO_DeInit+0x198>)
 800111a:	4013      	ands	r3, r2
 800111c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8001120:	4b41      	ldr	r3, [pc, #260]	; (8001228 <HAL_GPIO_DeInit+0x198>)
 8001122:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	43db      	mvns	r3, r3
 800112a:	493f      	ldr	r1, [pc, #252]	; (8001228 <HAL_GPIO_DeInit+0x198>)
 800112c:	4013      	ands	r3, r2
 800112e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <HAL_GPIO_DeInit+0x198>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	493b      	ldr	r1, [pc, #236]	; (8001228 <HAL_GPIO_DeInit+0x198>)
 800113c:	4013      	ands	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001140:	4b39      	ldr	r3, [pc, #228]	; (8001228 <HAL_GPIO_DeInit+0x198>)
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	4937      	ldr	r1, [pc, #220]	; (8001228 <HAL_GPIO_DeInit+0x198>)
 800114a:	4013      	ands	r3, r2
 800114c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	2207      	movs	r2, #7
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800115e:	4a2f      	ldr	r2, [pc, #188]	; (800121c <HAL_GPIO_DeInit+0x18c>)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43da      	mvns	r2, r3
 800116e:	482b      	ldr	r0, [pc, #172]	; (800121c <HAL_GPIO_DeInit+0x18c>)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	400a      	ands	r2, r1
 8001176:	3302      	adds	r3, #2
 8001178:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2103      	movs	r1, #3
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	08d2      	lsrs	r2, r2, #3
 80011b0:	4019      	ands	r1, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2103      	movs	r1, #3
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	401a      	ands	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	2101      	movs	r1, #1
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	401a      	ands	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2103      	movs	r1, #3
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	401a      	ands	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60da      	str	r2, [r3, #12]
    }

    position++;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	3301      	adds	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	fa22 f303 	lsr.w	r3, r2, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	f47f af49 	bne.w	80010a0 <HAL_GPIO_DeInit+0x10>
  }
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	371c      	adds	r7, #28
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40010000 	.word	0x40010000
 8001220:	48000400 	.word	0x48000400
 8001224:	48000800 	.word	0x48000800
 8001228:	58000800 	.word	0x58000800

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001248:	e002      	b.n	8001250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
	...

0800125c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a03      	ldr	r2, [pc, #12]	; (8001274 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	58000400 	.word	0x58000400

08001278 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_PWREx_GetVoltageRange+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	58000400 	.word	0x58000400

08001290 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d101      	bne.n	80012a6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	58000400 	.word	0x58000400

080012b4 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80012d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80012fe:	d101      	bne.n	8001304 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800132e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800134a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001358:	d101      	bne.n	800135e <LL_RCC_HSE_IsReady+0x18>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <LL_RCC_HSE_IsReady+0x1a>
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b2:	d101      	bne.n	80013b8 <LL_RCC_HSI_IsReady+0x18>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <LL_RCC_HSI_IsReady+0x1a>
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80013ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	061b      	lsls	r3, r3, #24
 80013d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80013ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d101      	bne.n	8001402 <LL_RCC_LSE_IsReady+0x18>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <LL_RCC_LSE_IsReady+0x1a>
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001418:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001438:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b02      	cmp	r3, #2
 800145e:	d101      	bne.n	8001464 <LL_RCC_LSI_IsReady+0x18>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <LL_RCC_LSI_IsReady+0x1a>
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6013      	str	r3, [r2, #0]
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800148e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	6013      	str	r3, [r2, #0]
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80014aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d101      	bne.n	80014bc <LL_RCC_MSI_IsReady+0x16>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <LL_RCC_MSI_IsReady+0x18>
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80014ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d101      	bne.n	80014dc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80014ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001508:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800151c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f023 0203 	bic.w	r2, r3, #3
 800154e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4313      	orrs	r3, r2
 8001556:	608b      	str	r3, [r1, #8]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 030c 	and.w	r3, r3, #12
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800158a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80015a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015ae:	f023 020f 	bic.w	r2, r3, #15
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ba:	4313      	orrs	r3, r2
 80015bc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800161a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001634:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800164a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr

08001672 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001684:	6013      	str	r3, [r2, #0]
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800169c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016a0:	6013      	str	r3, [r2, #0]
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80016ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016bc:	d101      	bne.n	80016c2 <LL_RCC_PLL_IsReady+0x18>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <LL_RCC_PLL_IsReady+0x1a>
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80016d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80016fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f003 0303 	and.w	r3, r3, #3
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001738:	d101      	bne.n	800173e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001750:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175c:	d101      	bne.n	8001762 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800177e:	d101      	bne.n	8001784 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800179c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017a0:	d101      	bne.n	80017a6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e38a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c2:	f7ff fece 	bl	8001562 <LL_RCC_GetSysClkSource>
 80017c6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017c8:	f7ff ffa2 	bl	8001710 <LL_RCC_PLL_GetMainSource>
 80017cc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80c9 	beq.w	800196e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_RCC_OscConfig+0x3e>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	2b0c      	cmp	r3, #12
 80017e6:	d17b      	bne.n	80018e0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d178      	bne.n	80018e0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ee:	f7ff fe5a 	bl	80014a6 <LL_RCC_MSI_IsReady>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_OscConfig+0x54>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e369      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <HAL_RCC_OscConfig+0x72>
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001820:	e006      	b.n	8001830 <HAL_RCC_OscConfig+0x80>
 8001822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001830:	4293      	cmp	r3, r2
 8001832:	d222      	bcs.n	800187a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	4618      	mov	r0, r3
 800183a:	f000 fd4f 	bl	80022dc <RCC_SetFlashLatencyFromMSIRange>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e347      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fe4e 	bl	8001514 <LL_RCC_MSI_SetCalibTrimming>
 8001878:	e021      	b.n	80018be <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800187a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fe35 	bl	8001514 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd14 	bl	80022dc <RCC_SetFlashLatencyFromMSIRange>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e30c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80018be:	f000 fcd5 	bl	800226c <HAL_RCC_GetHCLKFreq>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4ab4      	ldr	r2, [pc, #720]	; (8001b98 <HAL_RCC_OscConfig+0x3e8>)
 80018c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018c8:	4bb4      	ldr	r3, [pc, #720]	; (8001b9c <HAL_RCC_OscConfig+0x3ec>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff f923 	bl	8000b18 <HAL_InitTick>
 80018d2:	4603      	mov	r3, r0
 80018d4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80018d6:	7cfb      	ldrb	r3, [r7, #19]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d047      	beq.n	800196c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80018dc:	7cfb      	ldrb	r3, [r7, #19]
 80018de:	e2fb      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d02c      	beq.n	8001942 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018e8:	f7ff fdc1 	bl	800146e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ec:	f7ff f960 	bl	8000bb0 <HAL_GetTick>
 80018f0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f4:	f7ff f95c 	bl	8000bb0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e2e8      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001906:	f7ff fdce 	bl	80014a6 <LL_RCC_MSI_IsReady>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f1      	beq.n	80018f4 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fdea 	bl	8001514 <LL_RCC_MSI_SetCalibTrimming>
 8001940:	e015      	b.n	800196e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001942:	f7ff fda2 	bl	800148a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001946:	f7ff f933 	bl	8000bb0 <HAL_GetTick>
 800194a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800194e:	f7ff f92f 	bl	8000bb0 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e2bb      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001960:	f7ff fda1 	bl	80014a6 <LL_RCC_MSI_IsReady>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f1      	bne.n	800194e <HAL_RCC_OscConfig+0x19e>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d05f      	beq.n	8001a3a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	2b08      	cmp	r3, #8
 800197e:	d005      	beq.n	800198c <HAL_RCC_OscConfig+0x1dc>
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d10d      	bne.n	80019a2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d10a      	bne.n	80019a2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	f7ff fcdb 	bl	8001346 <LL_RCC_HSE_IsReady>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d050      	beq.n	8001a38 <HAL_RCC_OscConfig+0x288>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d14c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e29a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019b4:	4313      	orrs	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c0:	d102      	bne.n	80019c8 <HAL_RCC_OscConfig+0x218>
 80019c2:	f7ff fca4 	bl	800130e <LL_RCC_HSE_Enable>
 80019c6:	e00d      	b.n	80019e4 <HAL_RCC_OscConfig+0x234>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80019d0:	d104      	bne.n	80019dc <HAL_RCC_OscConfig+0x22c>
 80019d2:	f7ff fc6f 	bl	80012b4 <LL_RCC_HSE_EnableTcxo>
 80019d6:	f7ff fc9a 	bl	800130e <LL_RCC_HSE_Enable>
 80019da:	e003      	b.n	80019e4 <HAL_RCC_OscConfig+0x234>
 80019dc:	f7ff fca5 	bl	800132a <LL_RCC_HSE_Disable>
 80019e0:	f7ff fc76 	bl	80012d0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d012      	beq.n	8001a12 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff f8e0 	bl	8000bb0 <HAL_GetTick>
 80019f0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f4:	f7ff f8dc 	bl	8000bb0 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b64      	cmp	r3, #100	; 0x64
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e268      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a06:	f7ff fc9e 	bl	8001346 <LL_RCC_HSE_IsReady>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f1      	beq.n	80019f4 <HAL_RCC_OscConfig+0x244>
 8001a10:	e013      	b.n	8001a3a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff f8cd 	bl	8000bb0 <HAL_GetTick>
 8001a16:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1a:	f7ff f8c9 	bl	8000bb0 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b64      	cmp	r3, #100	; 0x64
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e255      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a2c:	f7ff fc8b 	bl	8001346 <LL_RCC_HSE_IsReady>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f1      	bne.n	8001a1a <HAL_RCC_OscConfig+0x26a>
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d04b      	beq.n	8001ade <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_OscConfig+0x2a8>
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d113      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d110      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a58:	f7ff fca2 	bl	80013a0 <LL_RCC_HSI_IsReady>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2be>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e234      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fca5 	bl	80013c2 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a78:	e031      	b.n	8001ade <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d019      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a82:	f7ff fc71 	bl	8001368 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff f893 	bl	8000bb0 <HAL_GetTick>
 8001a8a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff f88f 	bl	8000bb0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e21b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001aa0:	f7ff fc7e 	bl	80013a0 <LL_RCC_HSI_IsReady>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f1      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fc87 	bl	80013c2 <LL_RCC_HSI_SetCalibTrimming>
 8001ab4:	e013      	b.n	8001ade <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab6:	f7ff fc65 	bl	8001384 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff f879 	bl	8000bb0 <HAL_GetTick>
 8001abe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff f875 	bl	8000bb0 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e201      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ad4:	f7ff fc64 	bl	80013a0 <LL_RCC_HSI_IsReady>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f1      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d06e      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d056      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8001af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afa:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69da      	ldr	r2, [r3, #28]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0310 	and.w	r3, r3, #16
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d031      	beq.n	8001b6e <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e1da      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b2c:	f7ff fc7e 	bl	800142c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b30:	f7ff f83e 	bl	8000bb0 <HAL_GetTick>
 8001b34:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff f83a 	bl	8000bb0 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b11      	cmp	r3, #17
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e1c6      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001b4a:	f7ff fc7f 	bl	800144c <LL_RCC_LSI_IsReady>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f1      	bne.n	8001b38 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5c:	f023 0210 	bic.w	r2, r3, #16
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6e:	f7ff fc4d 	bl	800140c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff f81d 	bl	8000bb0 <HAL_GetTick>
 8001b76:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff f819 	bl	8000bb0 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b11      	cmp	r3, #17
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1a5      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001b8c:	f7ff fc5e 	bl	800144c <LL_RCC_LSI_IsReady>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f1      	beq.n	8001b7a <HAL_RCC_OscConfig+0x3ca>
 8001b96:	e017      	b.n	8001bc8 <HAL_RCC_OscConfig+0x418>
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba0:	f7ff fc44 	bl	800142c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f804 	bl	8000bb0 <HAL_GetTick>
 8001ba8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff f800 	bl	8000bb0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b11      	cmp	r3, #17
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e18c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001bbe:	f7ff fc45 	bl	800144c <LL_RCC_LSI_IsReady>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f1      	bne.n	8001bac <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80d8 	beq.w	8001d86 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001bd6:	f7ff fb5b 	bl	8001290 <LL_PWR_IsEnabledBkUpAccess>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d113      	bne.n	8001c08 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001be0:	f7ff fb3c 	bl	800125c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be4:	f7fe ffe4 	bl	8000bb0 <HAL_GetTick>
 8001be8:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bec:	f7fe ffe0 	bl	8000bb0 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e16c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001bfe:	f7ff fb47 	bl	8001290 <LL_PWR_IsEnabledBkUpAccess>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f1      	beq.n	8001bec <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d07b      	beq.n	8001d08 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b85      	cmp	r3, #133	; 0x85
 8001c16:	d003      	beq.n	8001c20 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2b05      	cmp	r3, #5
 8001c1e:	d109      	bne.n	8001c34 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7fe ffbc 	bl	8000bb0 <HAL_GetTick>
 8001c38:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7fe ffae 	bl	8000bb0 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e138      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c66:	f7ff fbc0 	bl	80013ea <LL_RCC_LSE_IsReady>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0ef      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	2b81      	cmp	r3, #129	; 0x81
 8001c76:	d003      	beq.n	8001c80 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b85      	cmp	r3, #133	; 0x85
 8001c7e:	d121      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7fe ff96 	bl	8000bb0 <HAL_GetTick>
 8001c84:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f7fe ff88 	bl	8000bb0 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e112      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0ec      	beq.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001cc2:	e060      	b.n	8001d86 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7fe ff74 	bl	8000bb0 <HAL_GetTick>
 8001cc8:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7fe ff66 	bl	8000bb0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0f0      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1ec      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x530>
 8001d06:	e03e      	b.n	8001d86 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7fe ff52 	bl	8000bb0 <HAL_GetTick>
 8001d0c:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7fe ff44 	bl	8000bb0 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e0ce      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ec      	bne.n	8001d24 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4a:	f7fe ff31 	bl	8000bb0 <HAL_GetTick>
 8001d4e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7fe ff23 	bl	8000bb0 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0ad      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d7c:	f7ff fb35 	bl	80013ea <LL_RCC_LSE_IsReady>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ef      	bne.n	8001d66 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80a3 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d076      	beq.n	8001e84 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d14b      	bne.n	8001e36 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	f7ff fc76 	bl	800168e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7fe ff05 	bl	8000bb0 <HAL_GetTick>
 8001da6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7fe ff01 	bl	8000bb0 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b0a      	cmp	r3, #10
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e08d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dbc:	f7ff fc75 	bl	80016aa <LL_RCC_PLL_IsReady>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f1      	bne.n	8001daa <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	4b44      	ldr	r3, [pc, #272]	; (8001ee0 <HAL_RCC_OscConfig+0x730>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dd8:	4311      	orrs	r1, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dde:	0212      	lsls	r2, r2, #8
 8001de0:	4311      	orrs	r1, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001de6:	4311      	orrs	r1, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dec:	4311      	orrs	r1, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001df2:	430a      	orrs	r2, r1
 8001df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfc:	f7ff fc39 	bl	8001672 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7fe fece 	bl	8000bb0 <HAL_GetTick>
 8001e14:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7fe feca 	bl	8000bb0 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b0a      	cmp	r3, #10
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e056      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001e2a:	f7ff fc3e 	bl	80016aa <LL_RCC_PLL_IsReady>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f1      	beq.n	8001e18 <HAL_RCC_OscConfig+0x668>
 8001e34:	e04f      	b.n	8001ed6 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	f7ff fc2a 	bl	800168e <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e44:	f023 0303 	bic.w	r3, r3, #3
 8001e48:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e54:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5c:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7fe fea7 	bl	8000bb0 <HAL_GetTick>
 8001e62:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e66:	f7fe fea3 	bl	8000bb0 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b0a      	cmp	r3, #10
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e02f      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e78:	f7ff fc17 	bl	80016aa <LL_RCC_PLL_IsReady>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f1      	bne.n	8001e66 <HAL_RCC_OscConfig+0x6b6>
 8001e82:	e028      	b.n	8001ed6 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e023      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	f003 0203 	and.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d115      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d10e      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	11c1808c 	.word	0x11c1808c

08001ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e10f      	b.n	8002118 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b89      	ldr	r3, [pc, #548]	; (8002120 <HAL_RCC_ClockConfig+0x23c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d91b      	bls.n	8001f3e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b86      	ldr	r3, [pc, #536]	; (8002120 <HAL_RCC_ClockConfig+0x23c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 0207 	bic.w	r2, r3, #7
 8001f0e:	4984      	ldr	r1, [pc, #528]	; (8002120 <HAL_RCC_ClockConfig+0x23c>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f16:	f7fe fe4b 	bl	8000bb0 <HAL_GetTick>
 8001f1a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f1e:	f7fe fe47 	bl	8000bb0 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0f3      	b.n	8002118 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f30:	4b7b      	ldr	r3, [pc, #492]	; (8002120 <HAL_RCC_ClockConfig+0x23c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d1ef      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fb12 	bl	8001578 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f54:	f7fe fe2c 	bl	8000bb0 <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f5c:	f7fe fe28 	bl	8000bb0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e0d4      	b.n	8002118 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f6e:	f7ff fbda 	bl	8001726 <LL_RCC_IsActiveFlag_HPRE>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f1      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d016      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fb08 	bl	800159e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f8e:	f7fe fe0f 	bl	8000bb0 <HAL_GetTick>
 8001f92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f96:	f7fe fe0b 	bl	8000bb0 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0b7      	b.n	8002118 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fa8:	f7ff fbce 	bl	8001748 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f1      	beq.n	8001f96 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d016      	beq.n	8001fec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fb01 	bl	80015ca <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fdf2 	bl	8000bb0 <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fd0:	f7fe fdee 	bl	8000bb0 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e09a      	b.n	8002118 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001fe2:	f7ff fbc3 	bl	800176c <LL_RCC_IsActiveFlag_PPRE1>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f1      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d017      	beq.n	8002028 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff faf6 	bl	80015f0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002004:	f7fe fdd4 	bl	8000bb0 <HAL_GetTick>
 8002008:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800200c:	f7fe fdd0 	bl	8000bb0 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e07c      	b.n	8002118 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800201e:	f7ff fbb6 	bl	800178e <LL_RCC_IsActiveFlag_PPRE2>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f1      	beq.n	800200c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d043      	beq.n	80020bc <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d106      	bne.n	800204a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800203c:	f7ff f983 	bl	8001346 <LL_RCC_HSE_IsReady>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d11e      	bne.n	8002084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e066      	b.n	8002118 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b03      	cmp	r3, #3
 8002050:	d106      	bne.n	8002060 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002052:	f7ff fb2a 	bl	80016aa <LL_RCC_PLL_IsReady>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d113      	bne.n	8002084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e05b      	b.n	8002118 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d106      	bne.n	8002076 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002068:	f7ff fa1d 	bl	80014a6 <LL_RCC_MSI_IsReady>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d108      	bne.n	8002084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e050      	b.n	8002118 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002076:	f7ff f993 	bl	80013a0 <LL_RCC_HSI_IsReady>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e049      	b.n	8002118 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fa57 	bl	800153c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800208e:	f7fe fd8f 	bl	8000bb0 <HAL_GetTick>
 8002092:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002094:	e00a      	b.n	80020ac <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002096:	f7fe fd8b 	bl	8000bb0 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e035      	b.n	8002118 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ac:	f7ff fa59 	bl	8001562 <LL_RCC_GetSysClkSource>
 80020b0:	4602      	mov	r2, r0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1ec      	bne.n	8002096 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_RCC_ClockConfig+0x23c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d21b      	bcs.n	8002102 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_RCC_ClockConfig+0x23c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 0207 	bic.w	r2, r3, #7
 80020d2:	4913      	ldr	r1, [pc, #76]	; (8002120 <HAL_RCC_ClockConfig+0x23c>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020da:	f7fe fd69 	bl	8000bb0 <HAL_GetTick>
 80020de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80020e2:	f7fe fd65 	bl	8000bb0 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e011      	b.n	8002118 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_RCC_ClockConfig+0x23c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d1ef      	bne.n	80020e2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002102:	f000 f8b3 	bl	800226c <HAL_RCC_GetHCLKFreq>
 8002106:	4603      	mov	r3, r0
 8002108:	4a06      	ldr	r2, [pc, #24]	; (8002124 <HAL_RCC_ClockConfig+0x240>)
 800210a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCC_ClockConfig+0x244>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fd01 	bl	8000b18 <HAL_InitTick>
 8002116:	4603      	mov	r3, r0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	58004000 	.word	0x58004000
 8002124:	20000000 	.word	0x20000000
 8002128:	20000004 	.word	0x20000004

0800212c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213a:	f7ff fa12 	bl	8001562 <LL_RCC_GetSysClkSource>
 800213e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002140:	f7ff fae6 	bl	8001710 <LL_RCC_PLL_GetMainSource>
 8002144:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x2c>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b0c      	cmp	r3, #12
 8002150:	d139      	bne.n	80021c6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d136      	bne.n	80021c6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002158:	f7ff f9b5 	bl	80014c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d115      	bne.n	800218e <HAL_RCC_GetSysClockFreq+0x62>
 8002162:	f7ff f9b0 	bl	80014c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002166:	4603      	mov	r3, r0
 8002168:	2b01      	cmp	r3, #1
 800216a:	d106      	bne.n	800217a <HAL_RCC_GetSysClockFreq+0x4e>
 800216c:	f7ff f9bb 	bl	80014e6 <LL_RCC_MSI_GetRange>
 8002170:	4603      	mov	r3, r0
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	e005      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0x5a>
 800217a:	f7ff f9bf 	bl	80014fc <LL_RCC_MSI_GetRangeAfterStandby>
 800217e:	4603      	mov	r3, r0
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	4a36      	ldr	r2, [pc, #216]	; (8002260 <HAL_RCC_GetSysClockFreq+0x134>)
 8002188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218c:	e014      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x8c>
 800218e:	f7ff f99a 	bl	80014c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002192:	4603      	mov	r3, r0
 8002194:	2b01      	cmp	r3, #1
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x7a>
 8002198:	f7ff f9a5 	bl	80014e6 <LL_RCC_MSI_GetRange>
 800219c:	4603      	mov	r3, r0
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	e005      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0x86>
 80021a6:	f7ff f9a9 	bl	80014fc <LL_RCC_MSI_GetRangeAfterStandby>
 80021aa:	4603      	mov	r3, r0
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	4a2b      	ldr	r2, [pc, #172]	; (8002260 <HAL_RCC_GetSysClockFreq+0x134>)
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d115      	bne.n	80021ec <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021c4:	e012      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d102      	bne.n	80021d2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <HAL_RCC_GetSysClockFreq+0x138>)
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	e00c      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d109      	bne.n	80021ec <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80021d8:	f7ff f888 	bl	80012ec <LL_RCC_HSE_IsEnabledDiv2>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d102      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <HAL_RCC_GetSysClockFreq+0x138>)
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	e001      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_RCC_GetSysClockFreq+0x13c>)
 80021ea:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ec:	f7ff f9b9 	bl	8001562 <LL_RCC_GetSysClkSource>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d12f      	bne.n	8002256 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80021f6:	f7ff fa8b 	bl	8001710 <LL_RCC_PLL_GetMainSource>
 80021fa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d003      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0xde>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d003      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0xe4>
 8002208:	e00d      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800220a:	4b16      	ldr	r3, [pc, #88]	; (8002264 <HAL_RCC_GetSysClockFreq+0x138>)
 800220c:	60fb      	str	r3, [r7, #12]
        break;
 800220e:	e00d      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002210:	f7ff f86c 	bl	80012ec <LL_RCC_HSE_IsEnabledDiv2>
 8002214:	4603      	mov	r3, r0
 8002216:	2b01      	cmp	r3, #1
 8002218:	d102      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_GetSysClockFreq+0x138>)
 800221c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800221e:	e005      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002222:	60fb      	str	r3, [r7, #12]
        break;
 8002224:	e002      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	60fb      	str	r3, [r7, #12]
        break;
 800222a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800222c:	f7ff fa4e 	bl	80016cc <LL_RCC_PLL_GetN>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	fb03 f402 	mul.w	r4, r3, r2
 8002238:	f7ff fa5f 	bl	80016fa <LL_RCC_PLL_GetDivider>
 800223c:	4603      	mov	r3, r0
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	3301      	adds	r3, #1
 8002242:	fbb4 f4f3 	udiv	r4, r4, r3
 8002246:	f7ff fa4d 	bl	80016e4 <LL_RCC_PLL_GetR>
 800224a:	4603      	mov	r3, r0
 800224c:	0f5b      	lsrs	r3, r3, #29
 800224e:	3301      	adds	r3, #1
 8002250:	fbb4 f3f3 	udiv	r3, r4, r3
 8002254:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002256:	697b      	ldr	r3, [r7, #20]
}
 8002258:	4618      	mov	r0, r3
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd90      	pop	{r4, r7, pc}
 8002260:	08004b90 	.word	0x08004b90
 8002264:	00f42400 	.word	0x00f42400
 8002268:	01e84800 	.word	0x01e84800

0800226c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800226c:	b598      	push	{r3, r4, r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002270:	f7ff ff5c 	bl	800212c <HAL_RCC_GetSysClockFreq>
 8002274:	4604      	mov	r4, r0
 8002276:	f7ff f9ce 	bl	8001616 <LL_RCC_GetAHBPrescaler>
 800227a:	4603      	mov	r3, r0
 800227c:	091b      	lsrs	r3, r3, #4
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	4a03      	ldr	r2, [pc, #12]	; (8002290 <HAL_RCC_GetHCLKFreq+0x24>)
 8002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002288:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd98      	pop	{r3, r4, r7, pc}
 8002290:	08004b30 	.word	0x08004b30

08002294 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002294:	b598      	push	{r3, r4, r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002298:	f7ff ffe8 	bl	800226c <HAL_RCC_GetHCLKFreq>
 800229c:	4604      	mov	r4, r0
 800229e:	f7ff f9d2 	bl	8001646 <LL_RCC_GetAPB1Prescaler>
 80022a2:	4603      	mov	r3, r0
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	4a03      	ldr	r2, [pc, #12]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd98      	pop	{r3, r4, r7, pc}
 80022b4:	08004b70 	.word	0x08004b70

080022b8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b8:	b598      	push	{r3, r4, r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80022bc:	f7ff ffd6 	bl	800226c <HAL_RCC_GetHCLKFreq>
 80022c0:	4604      	mov	r4, r0
 80022c2:	f7ff f9cb 	bl	800165c <LL_RCC_GetAPB2Prescaler>
 80022c6:	4603      	mov	r3, r0
 80022c8:	0adb      	lsrs	r3, r3, #11
 80022ca:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd98      	pop	{r3, r4, r7, pc}
 80022d8:	08004b70 	.word	0x08004b70

080022dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	4a10      	ldr	r2, [pc, #64]	; (8002330 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80022ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80022f4:	f7ff f99a 	bl	800162c <LL_RCC_GetAHB3Prescaler>
 80022f8:	4603      	mov	r3, r0
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	4a0c      	ldr	r2, [pc, #48]	; (8002334 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	fbb2 f3f3 	udiv	r3, r2, r3
 800230c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	4a09      	ldr	r2, [pc, #36]	; (8002338 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0c9c      	lsrs	r4, r3, #18
 8002318:	f7fe ffae 	bl	8001278 <HAL_PWREx_GetVoltageRange>
 800231c:	4603      	mov	r3, r0
 800231e:	4619      	mov	r1, r3
 8002320:	4620      	mov	r0, r4
 8002322:	f000 f80b 	bl	800233c <RCC_SetFlashLatency>
 8002326:	4603      	mov	r3, r0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	bd90      	pop	{r4, r7, pc}
 8002330:	08004b90 	.word	0x08004b90
 8002334:	08004b30 	.word	0x08004b30
 8002338:	431bde83 	.word	0x431bde83

0800233c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08e      	sub	sp, #56	; 0x38
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002346:	4a3c      	ldr	r2, [pc, #240]	; (8002438 <RCC_SetFlashLatency+0xfc>)
 8002348:	f107 0320 	add.w	r3, r7, #32
 800234c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002350:	6018      	str	r0, [r3, #0]
 8002352:	3304      	adds	r3, #4
 8002354:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002356:	4a39      	ldr	r2, [pc, #228]	; (800243c <RCC_SetFlashLatency+0x100>)
 8002358:	f107 0318 	add.w	r3, r7, #24
 800235c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002360:	6018      	str	r0, [r3, #0]
 8002362:	3304      	adds	r3, #4
 8002364:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002366:	4a36      	ldr	r2, [pc, #216]	; (8002440 <RCC_SetFlashLatency+0x104>)
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	ca07      	ldmia	r2, {r0, r1, r2}
 800236e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237c:	d11d      	bne.n	80023ba <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800237e:	2300      	movs	r3, #0
 8002380:	633b      	str	r3, [r7, #48]	; 0x30
 8002382:	e016      	b.n	80023b2 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800238c:	4413      	add	r3, r2
 800238e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002392:	461a      	mov	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4293      	cmp	r3, r2
 8002398:	d808      	bhi.n	80023ac <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023a2:	4413      	add	r3, r2
 80023a4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023aa:	e023      	b.n	80023f4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80023ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ae:	3301      	adds	r3, #1
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d9e5      	bls.n	8002384 <RCC_SetFlashLatency+0x48>
 80023b8:	e01c      	b.n	80023f4 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023be:	e016      	b.n	80023ee <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80023c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023c8:	4413      	add	r3, r2
 80023ca:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80023ce:	461a      	mov	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d808      	bhi.n	80023e8 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023de:	4413      	add	r3, r2
 80023e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023e6:	e005      	b.n	80023f4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ea:	3301      	adds	r3, #1
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d9e5      	bls.n	80023c0 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <RCC_SetFlashLatency+0x108>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 0207 	bic.w	r2, r3, #7
 80023fc:	4911      	ldr	r1, [pc, #68]	; (8002444 <RCC_SetFlashLatency+0x108>)
 80023fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002404:	f7fe fbd4 	bl	8000bb0 <HAL_GetTick>
 8002408:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800240a:	e008      	b.n	800241e <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800240c:	f7fe fbd0 	bl	8000bb0 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e007      	b.n	800242e <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <RCC_SetFlashLatency+0x108>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002428:	429a      	cmp	r2, r3
 800242a:	d1ef      	bne.n	800240c <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3738      	adds	r7, #56	; 0x38
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	08004b14 	.word	0x08004b14
 800243c:	08004b1c 	.word	0x08004b1c
 8002440:	08004b24 	.word	0x08004b24
 8002444:	58004000 	.word	0x58004000

08002448 <LL_RCC_LSE_IsReady>:
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b02      	cmp	r3, #2
 800245a:	d101      	bne.n	8002460 <LL_RCC_LSE_IsReady+0x18>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <LL_RCC_LSE_IsReady+0x1a>
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <LL_RCC_SetUSARTClockSource>:
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002476:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	43db      	mvns	r3, r3
 8002480:	401a      	ands	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	b29b      	uxth	r3, r3
 8002486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <LL_RCC_SetI2SClockSource>:
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80024a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <LL_RCC_SetLPUARTClockSource>:
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <LL_RCC_SetI2CClockSource>:
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80024f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002506:	43db      	mvns	r3, r3
 8002508:	401a      	ands	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <LL_RCC_SetLPTIMClockSource>:
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002532:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	0c1b      	lsrs	r3, r3, #16
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	43db      	mvns	r3, r3
 800253e:	401a      	ands	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	041b      	lsls	r3, r3, #16
 8002544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <LL_RCC_SetRNGClockSource>:
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800256c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <LL_RCC_SetADCClockSource>:
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800258a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <LL_RCC_SetRTCClockSource>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80025b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <LL_RCC_GetRTCClockSource>:
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80025da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <LL_RCC_ForceBackupDomainReset>:
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80025f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <LL_RCC_ReleaseBackupDomainReset>:
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800261e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
	...

08002630 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800263c:	2300      	movs	r3, #0
 800263e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002640:	2300      	movs	r3, #0
 8002642:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d058      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002650:	f7fe fe04 	bl	800125c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002654:	f7fe faac 	bl	8000bb0 <HAL_GetTick>
 8002658:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800265a:	e009      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265c:	f7fe faa8 	bl	8000bb0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d902      	bls.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	74fb      	strb	r3, [r7, #19]
        break;
 800266e:	e006      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002670:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267c:	d1ee      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d13c      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002684:	f7ff ffa7 	bl	80025d6 <LL_RCC_GetRTCClockSource>
 8002688:	4602      	mov	r2, r0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268e:	429a      	cmp	r2, r3
 8002690:	d00f      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026a0:	f7ff ffa5 	bl	80025ee <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026a4:	f7ff ffb3 	bl	800260e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d014      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe fa78 	bl	8000bb0 <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80026c2:	e00b      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7fe fa74 	bl	8000bb0 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d902      	bls.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	74fb      	strb	r3, [r7, #19]
            break;
 80026da:	e004      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80026dc:	f7ff feb4 	bl	8002448 <LL_RCC_LSE_IsReady>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d1ee      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d105      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff5b 	bl	80025ac <LL_RCC_SetRTCClockSource>
 80026f6:	e004      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	74bb      	strb	r3, [r7, #18]
 80026fc:	e001      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fe:	7cfb      	ldrb	r3, [r7, #19]
 8002700:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fea9 	bl	800246a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fe9e 	bl	800246a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d004      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fec0 	bl	80024c4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fee6 	bl	8002526 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fedb 	bl	8002526 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fed0 	bl	8002526 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fea9 	bl	80024ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d004      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fe9e 	bl	80024ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fe93 	bl	80024ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d011      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fe5e 	bl	800249a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e6:	d107      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80027e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d010      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fea5 	bl	8002558 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	2b00      	cmp	r3, #0
 8002814:	d107      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002820:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002824:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d011      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fea3 	bl	8002582 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002844:	d107      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002856:	7cbb      	ldrb	r3, [r7, #18]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	58000400 	.word	0x58000400

08002864 <LL_RCC_GetUSARTClockSource>:
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002870:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	401a      	ands	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	4313      	orrs	r3, r2
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <LL_RCC_GetLPUARTClockSource>:
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002894:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4013      	ands	r3, r2
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e042      	b.n	800293e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fd ffae 	bl	800082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	; 0x24
 80028d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f973 	bl	8002bd4 <UART_SetConfig>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e022      	b.n	800293e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fbb7 	bl	8003074 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002914:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002924:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fc3d 	bl	80031b6 <UART_CheckIdleState>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e02e      	b.n	80029b6 <HAL_UART_DeInit+0x70>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2224      	movs	r2, #36	; 0x24
 800295c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2200      	movs	r2, #0
 800297e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7fd ff95 	bl	80008b8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->gState = HAL_UART_STATE_RESET;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_RESET;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b08a      	sub	sp, #40	; 0x28
 80029c2:	af02      	add	r7, sp, #8
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	4613      	mov	r3, r2
 80029cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	f040 8083 	bne.w	8002ae0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_UART_Transmit+0x28>
 80029e0:	88fb      	ldrh	r3, [r7, #6]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e07b      	b.n	8002ae2 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_UART_Transmit+0x3a>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e074      	b.n	8002ae2 <HAL_UART_Transmit+0x124>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2221      	movs	r2, #33	; 0x21
 8002a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a10:	f7fe f8ce 	bl	8000bb0 <HAL_GetTick>
 8002a14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	88fa      	ldrh	r2, [r7, #6]
 8002a1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	88fa      	ldrh	r2, [r7, #6]
 8002a22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2e:	d108      	bne.n	8002a42 <HAL_UART_Transmit+0x84>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d104      	bne.n	8002a42 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
 8002a40:	e003      	b.n	8002a4a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002a52:	e02c      	b.n	8002aae <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fbf4 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e039      	b.n	8002ae2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10b      	bne.n	8002a8c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	3302      	adds	r3, #2
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	e007      	b.n	8002a9c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	781a      	ldrb	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1cc      	bne.n	8002a54 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2140      	movs	r1, #64	; 0x40
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 fbc1 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e006      	b.n	8002ae2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	e000      	b.n	8002ae2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002ae0:	2302      	movs	r3, #2
  }
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	4613      	mov	r3, r2
 8002af8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d142      	bne.n	8002b8a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_UART_Receive_IT+0x24>
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e03b      	b.n	8002b8c <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_UART_Receive_IT+0x36>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e034      	b.n	8002b8c <HAL_UART_Receive_IT+0xa0>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <HAL_UART_Receive_IT+0xa8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01f      	beq.n	8002b7a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d018      	beq.n	8002b7a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	613b      	str	r3, [r7, #16]
   return(result);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	623b      	str	r3, [r7, #32]
 8002b68:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6a:	69f9      	ldr	r1, [r7, #28]
 8002b6c:	6a3a      	ldr	r2, [r7, #32]
 8002b6e:	e841 2300 	strex	r3, r2, [r1]
 8002b72:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1e6      	bne.n	8002b48 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fc2b 	bl	80033dc <UART_Start_Receive_IT>
 8002b86:	4603      	mov	r3, r0
 8002b88:	e000      	b.n	8002b8c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002b8a:	2302      	movs	r3, #2
  }
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3728      	adds	r7, #40	; 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40008000 	.word	0x40008000

08002b98 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
	...

08002bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bd4:	b5b0      	push	{r4, r5, r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4bab      	ldr	r3, [pc, #684]	; (8002eac <UART_SetConfig+0x2d8>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	69f9      	ldr	r1, [r7, #28]
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4aa0      	ldr	r2, [pc, #640]	; (8002eb0 <UART_SetConfig+0x2dc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d004      	beq.n	8002c3c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002c46:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	69f9      	ldr	r1, [r7, #28]
 8002c50:	430b      	orrs	r3, r1
 8002c52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	f023 010f 	bic.w	r1, r3, #15
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a91      	ldr	r2, [pc, #580]	; (8002eb4 <UART_SetConfig+0x2e0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d122      	bne.n	8002cba <UART_SetConfig+0xe6>
 8002c74:	2003      	movs	r0, #3
 8002c76:	f7ff fdf5 	bl	8002864 <LL_RCC_GetUSARTClockSource>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d817      	bhi.n	8002cb4 <UART_SetConfig+0xe0>
 8002c84:	a201      	add	r2, pc, #4	; (adr r2, 8002c8c <UART_SetConfig+0xb8>)
 8002c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8a:	bf00      	nop
 8002c8c:	08002c9d 	.word	0x08002c9d
 8002c90:	08002ca9 	.word	0x08002ca9
 8002c94:	08002ca3 	.word	0x08002ca3
 8002c98:	08002caf 	.word	0x08002caf
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	76fb      	strb	r3, [r7, #27]
 8002ca0:	e072      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	76fb      	strb	r3, [r7, #27]
 8002ca6:	e06f      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	76fb      	strb	r3, [r7, #27]
 8002cac:	e06c      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002cae:	2308      	movs	r3, #8
 8002cb0:	76fb      	strb	r3, [r7, #27]
 8002cb2:	e069      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	76fb      	strb	r3, [r7, #27]
 8002cb8:	e066      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a7e      	ldr	r2, [pc, #504]	; (8002eb8 <UART_SetConfig+0x2e4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d134      	bne.n	8002d2e <UART_SetConfig+0x15a>
 8002cc4:	200c      	movs	r0, #12
 8002cc6:	f7ff fdcd 	bl	8002864 <LL_RCC_GetUSARTClockSource>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d829      	bhi.n	8002d28 <UART_SetConfig+0x154>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <UART_SetConfig+0x108>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002d11 	.word	0x08002d11
 8002ce0:	08002d29 	.word	0x08002d29
 8002ce4:	08002d29 	.word	0x08002d29
 8002ce8:	08002d29 	.word	0x08002d29
 8002cec:	08002d1d 	.word	0x08002d1d
 8002cf0:	08002d29 	.word	0x08002d29
 8002cf4:	08002d29 	.word	0x08002d29
 8002cf8:	08002d29 	.word	0x08002d29
 8002cfc:	08002d17 	.word	0x08002d17
 8002d00:	08002d29 	.word	0x08002d29
 8002d04:	08002d29 	.word	0x08002d29
 8002d08:	08002d29 	.word	0x08002d29
 8002d0c:	08002d23 	.word	0x08002d23
 8002d10:	2300      	movs	r3, #0
 8002d12:	76fb      	strb	r3, [r7, #27]
 8002d14:	e038      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002d16:	2302      	movs	r3, #2
 8002d18:	76fb      	strb	r3, [r7, #27]
 8002d1a:	e035      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	76fb      	strb	r3, [r7, #27]
 8002d20:	e032      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002d22:	2308      	movs	r3, #8
 8002d24:	76fb      	strb	r3, [r7, #27]
 8002d26:	e02f      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002d28:	2310      	movs	r3, #16
 8002d2a:	76fb      	strb	r3, [r7, #27]
 8002d2c:	e02c      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a5f      	ldr	r2, [pc, #380]	; (8002eb0 <UART_SetConfig+0x2dc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d125      	bne.n	8002d84 <UART_SetConfig+0x1b0>
 8002d38:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002d3c:	f7ff fda4 	bl	8002888 <LL_RCC_GetLPUARTClockSource>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d46:	d017      	beq.n	8002d78 <UART_SetConfig+0x1a4>
 8002d48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d4c:	d817      	bhi.n	8002d7e <UART_SetConfig+0x1aa>
 8002d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d52:	d00b      	beq.n	8002d6c <UART_SetConfig+0x198>
 8002d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d58:	d811      	bhi.n	8002d7e <UART_SetConfig+0x1aa>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <UART_SetConfig+0x192>
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d62:	d006      	beq.n	8002d72 <UART_SetConfig+0x19e>
 8002d64:	e00b      	b.n	8002d7e <UART_SetConfig+0x1aa>
 8002d66:	2300      	movs	r3, #0
 8002d68:	76fb      	strb	r3, [r7, #27]
 8002d6a:	e00d      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	76fb      	strb	r3, [r7, #27]
 8002d70:	e00a      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002d72:	2304      	movs	r3, #4
 8002d74:	76fb      	strb	r3, [r7, #27]
 8002d76:	e007      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002d78:	2308      	movs	r3, #8
 8002d7a:	76fb      	strb	r3, [r7, #27]
 8002d7c:	e004      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002d7e:	2310      	movs	r3, #16
 8002d80:	76fb      	strb	r3, [r7, #27]
 8002d82:	e001      	b.n	8002d88 <UART_SetConfig+0x1b4>
 8002d84:	2310      	movs	r3, #16
 8002d86:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a48      	ldr	r2, [pc, #288]	; (8002eb0 <UART_SetConfig+0x2dc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	f040 8098 	bne.w	8002ec4 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d94:	7efb      	ldrb	r3, [r7, #27]
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d823      	bhi.n	8002de2 <UART_SetConfig+0x20e>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <UART_SetConfig+0x1cc>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002dc5 	.word	0x08002dc5
 8002da4:	08002de3 	.word	0x08002de3
 8002da8:	08002dcd 	.word	0x08002dcd
 8002dac:	08002de3 	.word	0x08002de3
 8002db0:	08002dd3 	.word	0x08002dd3
 8002db4:	08002de3 	.word	0x08002de3
 8002db8:	08002de3 	.word	0x08002de3
 8002dbc:	08002de3 	.word	0x08002de3
 8002dc0:	08002ddb 	.word	0x08002ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dc4:	f7ff fa66 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 8002dc8:	6178      	str	r0, [r7, #20]
        break;
 8002dca:	e00f      	b.n	8002dec <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	; (8002ebc <UART_SetConfig+0x2e8>)
 8002dce:	617b      	str	r3, [r7, #20]
        break;
 8002dd0:	e00c      	b.n	8002dec <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd2:	f7ff f9ab 	bl	800212c <HAL_RCC_GetSysClockFreq>
 8002dd6:	6178      	str	r0, [r7, #20]
        break;
 8002dd8:	e008      	b.n	8002dec <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dde:	617b      	str	r3, [r7, #20]
        break;
 8002de0:	e004      	b.n	8002dec <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	76bb      	strb	r3, [r7, #26]
        break;
 8002dea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8128 	beq.w	8003044 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	4a31      	ldr	r2, [pc, #196]	; (8002ec0 <UART_SetConfig+0x2ec>)
 8002dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d305      	bcc.n	8002e24 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d902      	bls.n	8002e2a <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	76bb      	strb	r3, [r7, #26]
 8002e28:	e10c      	b.n	8003044 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <UART_SetConfig+0x2ec>)
 8002e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	f7fd f999 	bl	8000178 <__aeabi_uldivmod>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	020b      	lsls	r3, r1, #8
 8002e58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e5c:	0202      	lsls	r2, r0, #8
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	6849      	ldr	r1, [r1, #4]
 8002e62:	0849      	lsrs	r1, r1, #1
 8002e64:	4608      	mov	r0, r1
 8002e66:	f04f 0100 	mov.w	r1, #0
 8002e6a:	1814      	adds	r4, r2, r0
 8002e6c:	eb43 0501 	adc.w	r5, r3, r1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	461a      	mov	r2, r3
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	f7fd f97b 	bl	8000178 <__aeabi_uldivmod>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4613      	mov	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e90:	d308      	bcc.n	8002ea4 <UART_SetConfig+0x2d0>
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e98:	d204      	bcs.n	8002ea4 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	e0cf      	b.n	8003044 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	76bb      	strb	r3, [r7, #26]
 8002ea8:	e0cc      	b.n	8003044 <UART_SetConfig+0x470>
 8002eaa:	bf00      	nop
 8002eac:	cfff69f3 	.word	0xcfff69f3
 8002eb0:	40008000 	.word	0x40008000
 8002eb4:	40013800 	.word	0x40013800
 8002eb8:	40004400 	.word	0x40004400
 8002ebc:	00f42400 	.word	0x00f42400
 8002ec0:	08004bd0 	.word	0x08004bd0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ecc:	d165      	bne.n	8002f9a <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8002ece:	7efb      	ldrb	r3, [r7, #27]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d828      	bhi.n	8002f26 <UART_SetConfig+0x352>
 8002ed4:	a201      	add	r2, pc, #4	; (adr r2, 8002edc <UART_SetConfig+0x308>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002f01 	.word	0x08002f01
 8002ee0:	08002f09 	.word	0x08002f09
 8002ee4:	08002f11 	.word	0x08002f11
 8002ee8:	08002f27 	.word	0x08002f27
 8002eec:	08002f17 	.word	0x08002f17
 8002ef0:	08002f27 	.word	0x08002f27
 8002ef4:	08002f27 	.word	0x08002f27
 8002ef8:	08002f27 	.word	0x08002f27
 8002efc:	08002f1f 	.word	0x08002f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f00:	f7ff f9c8 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 8002f04:	6178      	str	r0, [r7, #20]
        break;
 8002f06:	e013      	b.n	8002f30 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f08:	f7ff f9d6 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 8002f0c:	6178      	str	r0, [r7, #20]
        break;
 8002f0e:	e00f      	b.n	8002f30 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f10:	4b56      	ldr	r3, [pc, #344]	; (800306c <UART_SetConfig+0x498>)
 8002f12:	617b      	str	r3, [r7, #20]
        break;
 8002f14:	e00c      	b.n	8002f30 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f16:	f7ff f909 	bl	800212c <HAL_RCC_GetSysClockFreq>
 8002f1a:	6178      	str	r0, [r7, #20]
        break;
 8002f1c:	e008      	b.n	8002f30 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f22:	617b      	str	r3, [r7, #20]
        break;
 8002f24:	e004      	b.n	8002f30 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	76bb      	strb	r3, [r7, #26]
        break;
 8002f2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8086 	beq.w	8003044 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	4a4c      	ldr	r2, [pc, #304]	; (8003070 <UART_SetConfig+0x49c>)
 8002f3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f42:	461a      	mov	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f4a:	005a      	lsls	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	441a      	add	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b0f      	cmp	r3, #15
 8002f64:	d916      	bls.n	8002f94 <UART_SetConfig+0x3c0>
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6c:	d212      	bcs.n	8002f94 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f023 030f 	bic.w	r3, r3, #15
 8002f76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	89fb      	ldrh	r3, [r7, #14]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	89fa      	ldrh	r2, [r7, #14]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	e057      	b.n	8003044 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	76bb      	strb	r3, [r7, #26]
 8002f98:	e054      	b.n	8003044 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f9a:	7efb      	ldrb	r3, [r7, #27]
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d828      	bhi.n	8002ff2 <UART_SetConfig+0x41e>
 8002fa0:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <UART_SetConfig+0x3d4>)
 8002fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa6:	bf00      	nop
 8002fa8:	08002fcd 	.word	0x08002fcd
 8002fac:	08002fd5 	.word	0x08002fd5
 8002fb0:	08002fdd 	.word	0x08002fdd
 8002fb4:	08002ff3 	.word	0x08002ff3
 8002fb8:	08002fe3 	.word	0x08002fe3
 8002fbc:	08002ff3 	.word	0x08002ff3
 8002fc0:	08002ff3 	.word	0x08002ff3
 8002fc4:	08002ff3 	.word	0x08002ff3
 8002fc8:	08002feb 	.word	0x08002feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fcc:	f7ff f962 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 8002fd0:	6178      	str	r0, [r7, #20]
        break;
 8002fd2:	e013      	b.n	8002ffc <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fd4:	f7ff f970 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 8002fd8:	6178      	str	r0, [r7, #20]
        break;
 8002fda:	e00f      	b.n	8002ffc <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fdc:	4b23      	ldr	r3, [pc, #140]	; (800306c <UART_SetConfig+0x498>)
 8002fde:	617b      	str	r3, [r7, #20]
        break;
 8002fe0:	e00c      	b.n	8002ffc <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe2:	f7ff f8a3 	bl	800212c <HAL_RCC_GetSysClockFreq>
 8002fe6:	6178      	str	r0, [r7, #20]
        break;
 8002fe8:	e008      	b.n	8002ffc <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fee:	617b      	str	r3, [r7, #20]
        break;
 8002ff0:	e004      	b.n	8002ffc <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	76bb      	strb	r3, [r7, #26]
        break;
 8002ffa:	bf00      	nop
    }

    if (pclk != 0U)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d020      	beq.n	8003044 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	4a1a      	ldr	r2, [pc, #104]	; (8003070 <UART_SetConfig+0x49c>)
 8003008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800300c:	461a      	mov	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	fbb3 f2f2 	udiv	r2, r3, r2
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	441a      	add	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	b29b      	uxth	r3, r3
 8003026:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2b0f      	cmp	r3, #15
 800302c:	d908      	bls.n	8003040 <UART_SetConfig+0x46c>
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003034:	d204      	bcs.n	8003040 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	e001      	b.n	8003044 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003060:	7ebb      	ldrb	r3, [r7, #26]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bdb0      	pop	{r4, r5, r7, pc}
 800306a:	bf00      	nop
 800306c:	00f42400 	.word	0x00f42400
 8003070:	08004bd0 	.word	0x08004bd0

08003074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01a      	beq.n	800318a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003172:	d10a      	bne.n	800318a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  }
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af02      	add	r7, sp, #8
 80031bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031c6:	f7fd fcf3 	bl	8000bb0 <HAL_GetTick>
 80031ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d10e      	bne.n	80031f8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f82f 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e025      	b.n	8003244 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b04      	cmp	r3, #4
 8003204:	d10e      	bne.n	8003224 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003206:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f819 	bl	800324c <UART_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e00f      	b.n	8003244 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2220      	movs	r2, #32
 8003230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b09c      	sub	sp, #112	; 0x70
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800325c:	e0a9      	b.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003264:	f000 80a5 	beq.w	80033b2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003268:	f7fd fca2 	bl	8000bb0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003274:	429a      	cmp	r2, r3
 8003276:	d302      	bcc.n	800327e <UART_WaitOnFlagUntilTimeout+0x32>
 8003278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800327a:	2b00      	cmp	r3, #0
 800327c:	d140      	bne.n	8003300 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003286:	e853 3f00 	ldrex	r3, [r3]
 800328a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800328c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800328e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003292:	667b      	str	r3, [r7, #100]	; 0x64
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800329c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800329e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032a4:	e841 2300 	strex	r3, r2, [r1]
 80032a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e6      	bne.n	800327e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3308      	adds	r3, #8
 80032b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ba:	e853 3f00 	ldrex	r3, [r3]
 80032be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	663b      	str	r3, [r7, #96]	; 0x60
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3308      	adds	r3, #8
 80032ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80032d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032d8:	e841 2300 	strex	r3, r2, [r1]
 80032dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e5      	bne.n	80032b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e069      	b.n	80033d4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d051      	beq.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800331c:	d149      	bne.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003326:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	e853 3f00 	ldrex	r3, [r3]
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800333c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003346:	637b      	str	r3, [r7, #52]	; 0x34
 8003348:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800334c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e6      	bne.n	8003328 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3308      	adds	r3, #8
 8003360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	613b      	str	r3, [r7, #16]
   return(result);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	66bb      	str	r3, [r7, #104]	; 0x68
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3308      	adds	r3, #8
 8003378:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800337a:	623a      	str	r2, [r7, #32]
 800337c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	69f9      	ldr	r1, [r7, #28]
 8003380:	6a3a      	ldr	r2, [r7, #32]
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	61bb      	str	r3, [r7, #24]
   return(result);
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e5      	bne.n	800335a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e010      	b.n	80033d4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4013      	ands	r3, r2
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	429a      	cmp	r2, r3
 80033c0:	bf0c      	ite	eq
 80033c2:	2301      	moveq	r3, #1
 80033c4:	2300      	movne	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	f43f af46 	beq.w	800325e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3770      	adds	r7, #112	; 0x70
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033dc:	b480      	push	{r7}
 80033de:	b09d      	sub	sp, #116	; 0x74
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	4613      	mov	r3, r2
 80033e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	88fa      	ldrh	r2, [r7, #6]
 80033fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340e:	d10e      	bne.n	800342e <UART_Start_Receive_IT+0x52>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d105      	bne.n	8003424 <UART_Start_Receive_IT+0x48>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800341e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003422:	e02d      	b.n	8003480 <UART_Start_Receive_IT+0xa4>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	22ff      	movs	r2, #255	; 0xff
 8003428:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800342c:	e028      	b.n	8003480 <UART_Start_Receive_IT+0xa4>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10d      	bne.n	8003452 <UART_Start_Receive_IT+0x76>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d104      	bne.n	8003448 <UART_Start_Receive_IT+0x6c>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	22ff      	movs	r2, #255	; 0xff
 8003442:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003446:	e01b      	b.n	8003480 <UART_Start_Receive_IT+0xa4>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	227f      	movs	r2, #127	; 0x7f
 800344c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003450:	e016      	b.n	8003480 <UART_Start_Receive_IT+0xa4>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800345a:	d10d      	bne.n	8003478 <UART_Start_Receive_IT+0x9c>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <UART_Start_Receive_IT+0x92>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	227f      	movs	r2, #127	; 0x7f
 8003468:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800346c:	e008      	b.n	8003480 <UART_Start_Receive_IT+0xa4>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	223f      	movs	r2, #63	; 0x3f
 8003472:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003476:	e003      	b.n	8003480 <UART_Start_Receive_IT+0xa4>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2222      	movs	r2, #34	; 0x22
 800348c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3308      	adds	r3, #8
 8003496:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800349a:	e853 3f00 	ldrex	r3, [r3]
 800349e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80034a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3308      	adds	r3, #8
 80034ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034b0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80034b2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80034b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80034be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e5      	bne.n	8003490 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034cc:	d14d      	bne.n	800356a <UART_Start_Receive_IT+0x18e>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d347      	bcc.n	800356a <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e2:	d107      	bne.n	80034f4 <UART_Start_Receive_IT+0x118>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d103      	bne.n	80034f4 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4a38      	ldr	r2, [pc, #224]	; (80035d0 <UART_Start_Receive_IT+0x1f4>)
 80034f0:	671a      	str	r2, [r3, #112]	; 0x70
 80034f2:	e002      	b.n	80034fa <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4a37      	ldr	r2, [pc, #220]	; (80035d4 <UART_Start_Receive_IT+0x1f8>)
 80034f8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003516:	66bb      	str	r3, [r7, #104]	; 0x68
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003520:	64bb      	str	r3, [r7, #72]	; 0x48
 8003522:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800352e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e6      	bne.n	8003502 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3308      	adds	r3, #8
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354a:	667b      	str	r3, [r7, #100]	; 0x64
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3308      	adds	r3, #8
 8003552:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003554:	637a      	str	r2, [r7, #52]	; 0x34
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800355a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e5      	bne.n	8003534 <UART_Start_Receive_IT+0x158>
 8003568:	e02c      	b.n	80035c4 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003572:	d107      	bne.n	8003584 <UART_Start_Receive_IT+0x1a8>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d103      	bne.n	8003584 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <UART_Start_Receive_IT+0x1fc>)
 8003580:	671a      	str	r2, [r3, #112]	; 0x70
 8003582:	e002      	b.n	800358a <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4a15      	ldr	r2, [pc, #84]	; (80035dc <UART_Start_Receive_IT+0x200>)
 8003588:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	613b      	str	r3, [r7, #16]
   return(result);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80035a6:	663b      	str	r3, [r7, #96]	; 0x60
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	69f9      	ldr	r1, [r7, #28]
 80035b6:	6a3a      	ldr	r2, [r7, #32]
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e6      	bne.n	8003592 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3774      	adds	r7, #116	; 0x74
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	08003b99 	.word	0x08003b99
 80035d4:	080038a1 	.word	0x080038a1
 80035d8:	08003741 	.word	0x08003741
 80035dc:	080035e1 	.word	0x080035e1

080035e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b096      	sub	sp, #88	; 0x58
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80035ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f8:	2b22      	cmp	r3, #34	; 0x22
 80035fa:	f040 8095 	bne.w	8003728 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003608:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800360c:	b2d9      	uxtb	r1, r3
 800360e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003612:	b2da      	uxtb	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	400a      	ands	r2, r1
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d178      	bne.n	8003738 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800365a:	653b      	str	r3, [r7, #80]	; 0x50
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003664:	647b      	str	r3, [r7, #68]	; 0x44
 8003666:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800366a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e6      	bne.n	8003646 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3308      	adds	r3, #8
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	623b      	str	r3, [r7, #32]
   return(result);
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3308      	adds	r3, #8
 8003696:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003698:	633a      	str	r2, [r7, #48]	; 0x30
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800369e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e5      	bne.n	8003678 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d12e      	bne.n	8003720 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	e853 3f00 	ldrex	r3, [r3]
 80036d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f023 0310 	bic.w	r3, r3, #16
 80036dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	461a      	mov	r2, r3
 80036e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ea:	69b9      	ldr	r1, [r7, #24]
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	e841 2300 	strex	r3, r2, [r1]
 80036f2:	617b      	str	r3, [r7, #20]
   return(result);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1e6      	bne.n	80036c8 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b10      	cmp	r3, #16
 8003706:	d103      	bne.n	8003710 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2210      	movs	r2, #16
 800370e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003716:	4619      	mov	r1, r3
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fa4f 	bl	8002bbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800371e:	e00b      	b.n	8003738 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff fa39 	bl	8002b98 <HAL_UART_RxCpltCallback>
}
 8003726:	e007      	b.n	8003738 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0208 	orr.w	r2, r2, #8
 8003736:	619a      	str	r2, [r3, #24]
}
 8003738:	bf00      	nop
 800373a:	3758      	adds	r7, #88	; 0x58
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b096      	sub	sp, #88	; 0x58
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800374e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003758:	2b22      	cmp	r3, #34	; 0x22
 800375a:	f040 8095 	bne.w	8003888 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800376e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003772:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003776:	4013      	ands	r3, r2
 8003778:	b29a      	uxth	r2, r3
 800377a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800377c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	1c9a      	adds	r2, r3, #2
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d178      	bne.n	8003898 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c4:	643b      	str	r3, [r7, #64]	; 0x40
 80037c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e6      	bne.n	80037a6 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3308      	adds	r3, #8
 80037de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	e853 3f00 	ldrex	r3, [r3]
 80037e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f023 0301 	bic.w	r3, r3, #1
 80037ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3308      	adds	r3, #8
 80037f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e5      	bne.n	80037d8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800381e:	2b01      	cmp	r3, #1
 8003820:	d12e      	bne.n	8003880 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	60bb      	str	r3, [r7, #8]
   return(result);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f023 0310 	bic.w	r3, r3, #16
 800383c:	647b      	str	r3, [r7, #68]	; 0x44
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6979      	ldr	r1, [r7, #20]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	613b      	str	r3, [r7, #16]
   return(result);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e6      	bne.n	8003828 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b10      	cmp	r3, #16
 8003866:	d103      	bne.n	8003870 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2210      	movs	r2, #16
 800386e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003876:	4619      	mov	r1, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff f99f 	bl	8002bbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800387e:	e00b      	b.n	8003898 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff f989 	bl	8002b98 <HAL_UART_RxCpltCallback>
}
 8003886:	e007      	b.n	8003898 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0208 	orr.w	r2, r2, #8
 8003896:	619a      	str	r2, [r3, #24]
}
 8003898:	bf00      	nop
 800389a:	3758      	adds	r7, #88	; 0x58
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b0a6      	sub	sp, #152	; 0x98
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80038ae:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d6:	2b22      	cmp	r3, #34	; 0x22
 80038d8:	f040 814f 	bne.w	8003b7a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80038e2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80038e6:	e0f6      	b.n	8003ad6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038f2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80038f6:	b2d9      	uxtb	r1, r3
 80038f8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003902:	400a      	ands	r2, r1
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800392e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	2b00      	cmp	r3, #0
 8003938:	d053      	beq.n	80039e2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800393a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d011      	beq.n	800396a <UART_RxISR_8BIT_FIFOEN+0xca>
 8003946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2201      	movs	r2, #1
 8003958:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800396a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d011      	beq.n	800399a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8003976:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00b      	beq.n	800399a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2202      	movs	r2, #2
 8003988:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003990:	f043 0204 	orr.w	r2, r3, #4
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800399a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d011      	beq.n	80039ca <UART_RxISR_8BIT_FIFOEN+0x12a>
 80039a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2204      	movs	r2, #4
 80039b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c0:	f043 0202 	orr.w	r2, r3, #2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d006      	beq.n	80039e2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff f8e8 	bl	8002baa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d173      	bne.n	8003ad6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f6:	e853 3f00 	ldrex	r3, [r3]
 80039fa:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80039fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a10:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a12:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003a16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e4      	bne.n	80039ee <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	f023 0301 	bic.w	r3, r3, #1
 8003a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3308      	adds	r3, #8
 8003a46:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003a48:	657a      	str	r2, [r7, #84]	; 0x54
 8003a4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e3      	bne.n	8003a24 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d12e      	bne.n	8003ad0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	f023 0310 	bic.w	r3, r3, #16
 8003a8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a96:	643b      	str	r3, [r7, #64]	; 0x40
 8003a98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e6      	bne.n	8003a78 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d103      	bne.n	8003ac0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2210      	movs	r2, #16
 8003abe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff f877 	bl	8002bbc <HAL_UARTEx_RxEventCallback>
 8003ace:	e002      	b.n	8003ad6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff f861 	bl	8002b98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ad6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d006      	beq.n	8003aec <UART_RxISR_8BIT_FIFOEN+0x24c>
 8003ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f47f aefe 	bne.w	80038e8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003af2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003af6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d045      	beq.n	8003b8a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003b04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d23e      	bcs.n	8003b8a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3308      	adds	r3, #8
 8003b12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b22:	673b      	str	r3, [r7, #112]	; 0x70
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3308      	adds	r3, #8
 8003b2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003b2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b34:	e841 2300 	strex	r3, r2, [r1]
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e5      	bne.n	8003b0c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8003b44:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f043 0320 	orr.w	r3, r3, #32
 8003b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6979      	ldr	r1, [r7, #20]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	613b      	str	r3, [r7, #16]
   return(result);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e6      	bne.n	8003b46 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b78:	e007      	b.n	8003b8a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699a      	ldr	r2, [r3, #24]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0208 	orr.w	r2, r2, #8
 8003b88:	619a      	str	r2, [r3, #24]
}
 8003b8a:	bf00      	nop
 8003b8c:	3798      	adds	r7, #152	; 0x98
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	080035e1 	.word	0x080035e1

08003b98 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b0a8      	sub	sp, #160	; 0xa0
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003ba6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	2b22      	cmp	r3, #34	; 0x22
 8003bd0:	f040 8153 	bne.w	8003e7a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003bda:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003bde:	e0fa      	b.n	8003dd6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8003bf2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8003bf6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	1c9a      	adds	r2, r3, #2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d053      	beq.n	8003cde <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d011      	beq.n	8003c66 <UART_RxISR_16BIT_FIFOEN+0xce>
 8003c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2201      	movs	r2, #1
 8003c54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c5c:	f043 0201 	orr.w	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d011      	beq.n	8003c96 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8003c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2202      	movs	r2, #2
 8003c84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8c:	f043 0204 	orr.w	r2, r3, #4
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d011      	beq.n	8003cc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8003ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2204      	movs	r2, #4
 8003cb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cbc:	f043 0202 	orr.w	r2, r3, #2
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d006      	beq.n	8003cde <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7fe ff6a 	bl	8002baa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d175      	bne.n	8003dd6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cf2:	e853 3f00 	ldrex	r3, [r3]
 8003cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d0e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e4      	bne.n	8003cea <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3308      	adds	r3, #8
 8003d26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d36:	f023 0301 	bic.w	r3, r3, #1
 8003d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	3308      	adds	r3, #8
 8003d44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d48:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e1      	bne.n	8003d20 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d12e      	bne.n	8003dd0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d88:	f023 0310 	bic.w	r3, r3, #16
 8003d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d96:	647b      	str	r3, [r7, #68]	; 0x44
 8003d98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e6      	bne.n	8003d78 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d103      	bne.n	8003dc0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7fe fef7 	bl	8002bbc <HAL_UARTEx_RxEventCallback>
 8003dce:	e002      	b.n	8003dd6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7fe fee1 	bl	8002b98 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003dd6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d006      	beq.n	8003dec <UART_RxISR_16BIT_FIFOEN+0x254>
 8003dde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f47f aefa 	bne.w	8003be0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003df2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003df6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d045      	beq.n	8003e8a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003e04:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d23e      	bcs.n	8003e8a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3308      	adds	r3, #8
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e22:	677b      	str	r3, [r7, #116]	; 0x74
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3308      	adds	r3, #8
 8003e2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e2c:	633a      	str	r2, [r7, #48]	; 0x30
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e5      	bne.n	8003e0c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8003e44:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f043 0320 	orr.w	r3, r3, #32
 8003e5a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e64:	61fb      	str	r3, [r7, #28]
 8003e66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	69b9      	ldr	r1, [r7, #24]
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	e841 2300 	strex	r3, r2, [r1]
 8003e70:	617b      	str	r3, [r7, #20]
   return(result);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e6      	bne.n	8003e46 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e78:	e007      	b.n	8003e8a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	699a      	ldr	r2, [r3, #24]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0208 	orr.w	r2, r2, #8
 8003e88:	619a      	str	r2, [r3, #24]
}
 8003e8a:	bf00      	nop
 8003e8c:	37a0      	adds	r7, #160	; 0xa0
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	08003741 	.word	0x08003741

08003e98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_UARTEx_DisableFifoMode+0x16>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e027      	b.n	8003efe <HAL_UARTEx_DisableFifoMode+0x66>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2224      	movs	r2, #36	; 0x24
 8003eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003edc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e02d      	b.n	8003f7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2224      	movs	r2, #36	; 0x24
 8003f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f84f 	bl	8004000 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e02d      	b.n	8003ff8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2224      	movs	r2, #36	; 0x24
 8003fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f811 	bl	8004000 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800400c:	2b00      	cmp	r3, #0
 800400e:	d108      	bne.n	8004022 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004020:	e031      	b.n	8004086 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004022:	2308      	movs	r3, #8
 8004024:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004026:	2308      	movs	r3, #8
 8004028:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	0e5b      	lsrs	r3, r3, #25
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	0f5b      	lsrs	r3, r3, #29
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800404a:	7bbb      	ldrb	r3, [r7, #14]
 800404c:	7b3a      	ldrb	r2, [r7, #12]
 800404e:	4910      	ldr	r1, [pc, #64]	; (8004090 <UARTEx_SetNbDataToProcess+0x90>)
 8004050:	5c8a      	ldrb	r2, [r1, r2]
 8004052:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004056:	7b3a      	ldrb	r2, [r7, #12]
 8004058:	490e      	ldr	r1, [pc, #56]	; (8004094 <UARTEx_SetNbDataToProcess+0x94>)
 800405a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800405c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004060:	b29a      	uxth	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	7b7a      	ldrb	r2, [r7, #13]
 800406c:	4908      	ldr	r1, [pc, #32]	; (8004090 <UARTEx_SetNbDataToProcess+0x90>)
 800406e:	5c8a      	ldrb	r2, [r1, r2]
 8004070:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004074:	7b7a      	ldrb	r2, [r7, #13]
 8004076:	4907      	ldr	r1, [pc, #28]	; (8004094 <UARTEx_SetNbDataToProcess+0x94>)
 8004078:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800407a:	fb93 f3f2 	sdiv	r3, r3, r2
 800407e:	b29a      	uxth	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr
 8004090:	08004be8 	.word	0x08004be8
 8004094:	08004bf0 	.word	0x08004bf0

08004098 <__errno>:
 8004098:	4b01      	ldr	r3, [pc, #4]	; (80040a0 <__errno+0x8>)
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	2000000c 	.word	0x2000000c

080040a4 <__libc_init_array>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	4d0d      	ldr	r5, [pc, #52]	; (80040dc <__libc_init_array+0x38>)
 80040a8:	4c0d      	ldr	r4, [pc, #52]	; (80040e0 <__libc_init_array+0x3c>)
 80040aa:	1b64      	subs	r4, r4, r5
 80040ac:	10a4      	asrs	r4, r4, #2
 80040ae:	2600      	movs	r6, #0
 80040b0:	42a6      	cmp	r6, r4
 80040b2:	d109      	bne.n	80040c8 <__libc_init_array+0x24>
 80040b4:	4d0b      	ldr	r5, [pc, #44]	; (80040e4 <__libc_init_array+0x40>)
 80040b6:	4c0c      	ldr	r4, [pc, #48]	; (80040e8 <__libc_init_array+0x44>)
 80040b8:	f000 fcf2 	bl	8004aa0 <_init>
 80040bc:	1b64      	subs	r4, r4, r5
 80040be:	10a4      	asrs	r4, r4, #2
 80040c0:	2600      	movs	r6, #0
 80040c2:	42a6      	cmp	r6, r4
 80040c4:	d105      	bne.n	80040d2 <__libc_init_array+0x2e>
 80040c6:	bd70      	pop	{r4, r5, r6, pc}
 80040c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040cc:	4798      	blx	r3
 80040ce:	3601      	adds	r6, #1
 80040d0:	e7ee      	b.n	80040b0 <__libc_init_array+0xc>
 80040d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d6:	4798      	blx	r3
 80040d8:	3601      	adds	r6, #1
 80040da:	e7f2      	b.n	80040c2 <__libc_init_array+0x1e>
 80040dc:	08004c64 	.word	0x08004c64
 80040e0:	08004c64 	.word	0x08004c64
 80040e4:	08004c64 	.word	0x08004c64
 80040e8:	08004c68 	.word	0x08004c68

080040ec <memcmp>:
 80040ec:	b530      	push	{r4, r5, lr}
 80040ee:	3901      	subs	r1, #1
 80040f0:	2400      	movs	r4, #0
 80040f2:	42a2      	cmp	r2, r4
 80040f4:	d101      	bne.n	80040fa <memcmp+0xe>
 80040f6:	2000      	movs	r0, #0
 80040f8:	e005      	b.n	8004106 <memcmp+0x1a>
 80040fa:	5d03      	ldrb	r3, [r0, r4]
 80040fc:	3401      	adds	r4, #1
 80040fe:	5d0d      	ldrb	r5, [r1, r4]
 8004100:	42ab      	cmp	r3, r5
 8004102:	d0f6      	beq.n	80040f2 <memcmp+0x6>
 8004104:	1b58      	subs	r0, r3, r5
 8004106:	bd30      	pop	{r4, r5, pc}

08004108 <memset>:
 8004108:	4402      	add	r2, r0
 800410a:	4603      	mov	r3, r0
 800410c:	4293      	cmp	r3, r2
 800410e:	d100      	bne.n	8004112 <memset+0xa>
 8004110:	4770      	bx	lr
 8004112:	f803 1b01 	strb.w	r1, [r3], #1
 8004116:	e7f9      	b.n	800410c <memset+0x4>

08004118 <_puts_r>:
 8004118:	b570      	push	{r4, r5, r6, lr}
 800411a:	460e      	mov	r6, r1
 800411c:	4605      	mov	r5, r0
 800411e:	b118      	cbz	r0, 8004128 <_puts_r+0x10>
 8004120:	6983      	ldr	r3, [r0, #24]
 8004122:	b90b      	cbnz	r3, 8004128 <_puts_r+0x10>
 8004124:	f000 fa48 	bl	80045b8 <__sinit>
 8004128:	69ab      	ldr	r3, [r5, #24]
 800412a:	68ac      	ldr	r4, [r5, #8]
 800412c:	b913      	cbnz	r3, 8004134 <_puts_r+0x1c>
 800412e:	4628      	mov	r0, r5
 8004130:	f000 fa42 	bl	80045b8 <__sinit>
 8004134:	4b2c      	ldr	r3, [pc, #176]	; (80041e8 <_puts_r+0xd0>)
 8004136:	429c      	cmp	r4, r3
 8004138:	d120      	bne.n	800417c <_puts_r+0x64>
 800413a:	686c      	ldr	r4, [r5, #4]
 800413c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800413e:	07db      	lsls	r3, r3, #31
 8004140:	d405      	bmi.n	800414e <_puts_r+0x36>
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	0598      	lsls	r0, r3, #22
 8004146:	d402      	bmi.n	800414e <_puts_r+0x36>
 8004148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800414a:	f000 fad3 	bl	80046f4 <__retarget_lock_acquire_recursive>
 800414e:	89a3      	ldrh	r3, [r4, #12]
 8004150:	0719      	lsls	r1, r3, #28
 8004152:	d51d      	bpl.n	8004190 <_puts_r+0x78>
 8004154:	6923      	ldr	r3, [r4, #16]
 8004156:	b1db      	cbz	r3, 8004190 <_puts_r+0x78>
 8004158:	3e01      	subs	r6, #1
 800415a:	68a3      	ldr	r3, [r4, #8]
 800415c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004160:	3b01      	subs	r3, #1
 8004162:	60a3      	str	r3, [r4, #8]
 8004164:	bb39      	cbnz	r1, 80041b6 <_puts_r+0x9e>
 8004166:	2b00      	cmp	r3, #0
 8004168:	da38      	bge.n	80041dc <_puts_r+0xc4>
 800416a:	4622      	mov	r2, r4
 800416c:	210a      	movs	r1, #10
 800416e:	4628      	mov	r0, r5
 8004170:	f000 f848 	bl	8004204 <__swbuf_r>
 8004174:	3001      	adds	r0, #1
 8004176:	d011      	beq.n	800419c <_puts_r+0x84>
 8004178:	250a      	movs	r5, #10
 800417a:	e011      	b.n	80041a0 <_puts_r+0x88>
 800417c:	4b1b      	ldr	r3, [pc, #108]	; (80041ec <_puts_r+0xd4>)
 800417e:	429c      	cmp	r4, r3
 8004180:	d101      	bne.n	8004186 <_puts_r+0x6e>
 8004182:	68ac      	ldr	r4, [r5, #8]
 8004184:	e7da      	b.n	800413c <_puts_r+0x24>
 8004186:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <_puts_r+0xd8>)
 8004188:	429c      	cmp	r4, r3
 800418a:	bf08      	it	eq
 800418c:	68ec      	ldreq	r4, [r5, #12]
 800418e:	e7d5      	b.n	800413c <_puts_r+0x24>
 8004190:	4621      	mov	r1, r4
 8004192:	4628      	mov	r0, r5
 8004194:	f000 f888 	bl	80042a8 <__swsetup_r>
 8004198:	2800      	cmp	r0, #0
 800419a:	d0dd      	beq.n	8004158 <_puts_r+0x40>
 800419c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80041a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041a2:	07da      	lsls	r2, r3, #31
 80041a4:	d405      	bmi.n	80041b2 <_puts_r+0x9a>
 80041a6:	89a3      	ldrh	r3, [r4, #12]
 80041a8:	059b      	lsls	r3, r3, #22
 80041aa:	d402      	bmi.n	80041b2 <_puts_r+0x9a>
 80041ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041ae:	f000 faa2 	bl	80046f6 <__retarget_lock_release_recursive>
 80041b2:	4628      	mov	r0, r5
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da04      	bge.n	80041c4 <_puts_r+0xac>
 80041ba:	69a2      	ldr	r2, [r4, #24]
 80041bc:	429a      	cmp	r2, r3
 80041be:	dc06      	bgt.n	80041ce <_puts_r+0xb6>
 80041c0:	290a      	cmp	r1, #10
 80041c2:	d004      	beq.n	80041ce <_puts_r+0xb6>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	6022      	str	r2, [r4, #0]
 80041ca:	7019      	strb	r1, [r3, #0]
 80041cc:	e7c5      	b.n	800415a <_puts_r+0x42>
 80041ce:	4622      	mov	r2, r4
 80041d0:	4628      	mov	r0, r5
 80041d2:	f000 f817 	bl	8004204 <__swbuf_r>
 80041d6:	3001      	adds	r0, #1
 80041d8:	d1bf      	bne.n	800415a <_puts_r+0x42>
 80041da:	e7df      	b.n	800419c <_puts_r+0x84>
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	250a      	movs	r5, #10
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	6022      	str	r2, [r4, #0]
 80041e4:	701d      	strb	r5, [r3, #0]
 80041e6:	e7db      	b.n	80041a0 <_puts_r+0x88>
 80041e8:	08004c1c 	.word	0x08004c1c
 80041ec:	08004c3c 	.word	0x08004c3c
 80041f0:	08004bfc 	.word	0x08004bfc

080041f4 <puts>:
 80041f4:	4b02      	ldr	r3, [pc, #8]	; (8004200 <puts+0xc>)
 80041f6:	4601      	mov	r1, r0
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	f7ff bf8d 	b.w	8004118 <_puts_r>
 80041fe:	bf00      	nop
 8004200:	2000000c 	.word	0x2000000c

08004204 <__swbuf_r>:
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	460e      	mov	r6, r1
 8004208:	4614      	mov	r4, r2
 800420a:	4605      	mov	r5, r0
 800420c:	b118      	cbz	r0, 8004216 <__swbuf_r+0x12>
 800420e:	6983      	ldr	r3, [r0, #24]
 8004210:	b90b      	cbnz	r3, 8004216 <__swbuf_r+0x12>
 8004212:	f000 f9d1 	bl	80045b8 <__sinit>
 8004216:	4b21      	ldr	r3, [pc, #132]	; (800429c <__swbuf_r+0x98>)
 8004218:	429c      	cmp	r4, r3
 800421a:	d12b      	bne.n	8004274 <__swbuf_r+0x70>
 800421c:	686c      	ldr	r4, [r5, #4]
 800421e:	69a3      	ldr	r3, [r4, #24]
 8004220:	60a3      	str	r3, [r4, #8]
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	071a      	lsls	r2, r3, #28
 8004226:	d52f      	bpl.n	8004288 <__swbuf_r+0x84>
 8004228:	6923      	ldr	r3, [r4, #16]
 800422a:	b36b      	cbz	r3, 8004288 <__swbuf_r+0x84>
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	6820      	ldr	r0, [r4, #0]
 8004230:	1ac0      	subs	r0, r0, r3
 8004232:	6963      	ldr	r3, [r4, #20]
 8004234:	b2f6      	uxtb	r6, r6
 8004236:	4283      	cmp	r3, r0
 8004238:	4637      	mov	r7, r6
 800423a:	dc04      	bgt.n	8004246 <__swbuf_r+0x42>
 800423c:	4621      	mov	r1, r4
 800423e:	4628      	mov	r0, r5
 8004240:	f000 f926 	bl	8004490 <_fflush_r>
 8004244:	bb30      	cbnz	r0, 8004294 <__swbuf_r+0x90>
 8004246:	68a3      	ldr	r3, [r4, #8]
 8004248:	3b01      	subs	r3, #1
 800424a:	60a3      	str	r3, [r4, #8]
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	6022      	str	r2, [r4, #0]
 8004252:	701e      	strb	r6, [r3, #0]
 8004254:	6963      	ldr	r3, [r4, #20]
 8004256:	3001      	adds	r0, #1
 8004258:	4283      	cmp	r3, r0
 800425a:	d004      	beq.n	8004266 <__swbuf_r+0x62>
 800425c:	89a3      	ldrh	r3, [r4, #12]
 800425e:	07db      	lsls	r3, r3, #31
 8004260:	d506      	bpl.n	8004270 <__swbuf_r+0x6c>
 8004262:	2e0a      	cmp	r6, #10
 8004264:	d104      	bne.n	8004270 <__swbuf_r+0x6c>
 8004266:	4621      	mov	r1, r4
 8004268:	4628      	mov	r0, r5
 800426a:	f000 f911 	bl	8004490 <_fflush_r>
 800426e:	b988      	cbnz	r0, 8004294 <__swbuf_r+0x90>
 8004270:	4638      	mov	r0, r7
 8004272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004274:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <__swbuf_r+0x9c>)
 8004276:	429c      	cmp	r4, r3
 8004278:	d101      	bne.n	800427e <__swbuf_r+0x7a>
 800427a:	68ac      	ldr	r4, [r5, #8]
 800427c:	e7cf      	b.n	800421e <__swbuf_r+0x1a>
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <__swbuf_r+0xa0>)
 8004280:	429c      	cmp	r4, r3
 8004282:	bf08      	it	eq
 8004284:	68ec      	ldreq	r4, [r5, #12]
 8004286:	e7ca      	b.n	800421e <__swbuf_r+0x1a>
 8004288:	4621      	mov	r1, r4
 800428a:	4628      	mov	r0, r5
 800428c:	f000 f80c 	bl	80042a8 <__swsetup_r>
 8004290:	2800      	cmp	r0, #0
 8004292:	d0cb      	beq.n	800422c <__swbuf_r+0x28>
 8004294:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004298:	e7ea      	b.n	8004270 <__swbuf_r+0x6c>
 800429a:	bf00      	nop
 800429c:	08004c1c 	.word	0x08004c1c
 80042a0:	08004c3c 	.word	0x08004c3c
 80042a4:	08004bfc 	.word	0x08004bfc

080042a8 <__swsetup_r>:
 80042a8:	4b32      	ldr	r3, [pc, #200]	; (8004374 <__swsetup_r+0xcc>)
 80042aa:	b570      	push	{r4, r5, r6, lr}
 80042ac:	681d      	ldr	r5, [r3, #0]
 80042ae:	4606      	mov	r6, r0
 80042b0:	460c      	mov	r4, r1
 80042b2:	b125      	cbz	r5, 80042be <__swsetup_r+0x16>
 80042b4:	69ab      	ldr	r3, [r5, #24]
 80042b6:	b913      	cbnz	r3, 80042be <__swsetup_r+0x16>
 80042b8:	4628      	mov	r0, r5
 80042ba:	f000 f97d 	bl	80045b8 <__sinit>
 80042be:	4b2e      	ldr	r3, [pc, #184]	; (8004378 <__swsetup_r+0xd0>)
 80042c0:	429c      	cmp	r4, r3
 80042c2:	d10f      	bne.n	80042e4 <__swsetup_r+0x3c>
 80042c4:	686c      	ldr	r4, [r5, #4]
 80042c6:	89a3      	ldrh	r3, [r4, #12]
 80042c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042cc:	0719      	lsls	r1, r3, #28
 80042ce:	d42c      	bmi.n	800432a <__swsetup_r+0x82>
 80042d0:	06dd      	lsls	r5, r3, #27
 80042d2:	d411      	bmi.n	80042f8 <__swsetup_r+0x50>
 80042d4:	2309      	movs	r3, #9
 80042d6:	6033      	str	r3, [r6, #0]
 80042d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042e2:	e03e      	b.n	8004362 <__swsetup_r+0xba>
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <__swsetup_r+0xd4>)
 80042e6:	429c      	cmp	r4, r3
 80042e8:	d101      	bne.n	80042ee <__swsetup_r+0x46>
 80042ea:	68ac      	ldr	r4, [r5, #8]
 80042ec:	e7eb      	b.n	80042c6 <__swsetup_r+0x1e>
 80042ee:	4b24      	ldr	r3, [pc, #144]	; (8004380 <__swsetup_r+0xd8>)
 80042f0:	429c      	cmp	r4, r3
 80042f2:	bf08      	it	eq
 80042f4:	68ec      	ldreq	r4, [r5, #12]
 80042f6:	e7e6      	b.n	80042c6 <__swsetup_r+0x1e>
 80042f8:	0758      	lsls	r0, r3, #29
 80042fa:	d512      	bpl.n	8004322 <__swsetup_r+0x7a>
 80042fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042fe:	b141      	cbz	r1, 8004312 <__swsetup_r+0x6a>
 8004300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004304:	4299      	cmp	r1, r3
 8004306:	d002      	beq.n	800430e <__swsetup_r+0x66>
 8004308:	4630      	mov	r0, r6
 800430a:	f000 fa59 	bl	80047c0 <_free_r>
 800430e:	2300      	movs	r3, #0
 8004310:	6363      	str	r3, [r4, #52]	; 0x34
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004318:	81a3      	strh	r3, [r4, #12]
 800431a:	2300      	movs	r3, #0
 800431c:	6063      	str	r3, [r4, #4]
 800431e:	6923      	ldr	r3, [r4, #16]
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	89a3      	ldrh	r3, [r4, #12]
 8004324:	f043 0308 	orr.w	r3, r3, #8
 8004328:	81a3      	strh	r3, [r4, #12]
 800432a:	6923      	ldr	r3, [r4, #16]
 800432c:	b94b      	cbnz	r3, 8004342 <__swsetup_r+0x9a>
 800432e:	89a3      	ldrh	r3, [r4, #12]
 8004330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004338:	d003      	beq.n	8004342 <__swsetup_r+0x9a>
 800433a:	4621      	mov	r1, r4
 800433c:	4630      	mov	r0, r6
 800433e:	f000 f9ff 	bl	8004740 <__smakebuf_r>
 8004342:	89a0      	ldrh	r0, [r4, #12]
 8004344:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004348:	f010 0301 	ands.w	r3, r0, #1
 800434c:	d00a      	beq.n	8004364 <__swsetup_r+0xbc>
 800434e:	2300      	movs	r3, #0
 8004350:	60a3      	str	r3, [r4, #8]
 8004352:	6963      	ldr	r3, [r4, #20]
 8004354:	425b      	negs	r3, r3
 8004356:	61a3      	str	r3, [r4, #24]
 8004358:	6923      	ldr	r3, [r4, #16]
 800435a:	b943      	cbnz	r3, 800436e <__swsetup_r+0xc6>
 800435c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004360:	d1ba      	bne.n	80042d8 <__swsetup_r+0x30>
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	0781      	lsls	r1, r0, #30
 8004366:	bf58      	it	pl
 8004368:	6963      	ldrpl	r3, [r4, #20]
 800436a:	60a3      	str	r3, [r4, #8]
 800436c:	e7f4      	b.n	8004358 <__swsetup_r+0xb0>
 800436e:	2000      	movs	r0, #0
 8004370:	e7f7      	b.n	8004362 <__swsetup_r+0xba>
 8004372:	bf00      	nop
 8004374:	2000000c 	.word	0x2000000c
 8004378:	08004c1c 	.word	0x08004c1c
 800437c:	08004c3c 	.word	0x08004c3c
 8004380:	08004bfc 	.word	0x08004bfc

08004384 <__sflush_r>:
 8004384:	898a      	ldrh	r2, [r1, #12]
 8004386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800438a:	4605      	mov	r5, r0
 800438c:	0710      	lsls	r0, r2, #28
 800438e:	460c      	mov	r4, r1
 8004390:	d458      	bmi.n	8004444 <__sflush_r+0xc0>
 8004392:	684b      	ldr	r3, [r1, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	dc05      	bgt.n	80043a4 <__sflush_r+0x20>
 8004398:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	dc02      	bgt.n	80043a4 <__sflush_r+0x20>
 800439e:	2000      	movs	r0, #0
 80043a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043a6:	2e00      	cmp	r6, #0
 80043a8:	d0f9      	beq.n	800439e <__sflush_r+0x1a>
 80043aa:	2300      	movs	r3, #0
 80043ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043b0:	682f      	ldr	r7, [r5, #0]
 80043b2:	602b      	str	r3, [r5, #0]
 80043b4:	d032      	beq.n	800441c <__sflush_r+0x98>
 80043b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	075a      	lsls	r2, r3, #29
 80043bc:	d505      	bpl.n	80043ca <__sflush_r+0x46>
 80043be:	6863      	ldr	r3, [r4, #4]
 80043c0:	1ac0      	subs	r0, r0, r3
 80043c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043c4:	b10b      	cbz	r3, 80043ca <__sflush_r+0x46>
 80043c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043c8:	1ac0      	subs	r0, r0, r3
 80043ca:	2300      	movs	r3, #0
 80043cc:	4602      	mov	r2, r0
 80043ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043d0:	6a21      	ldr	r1, [r4, #32]
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b0      	blx	r6
 80043d6:	1c43      	adds	r3, r0, #1
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	d106      	bne.n	80043ea <__sflush_r+0x66>
 80043dc:	6829      	ldr	r1, [r5, #0]
 80043de:	291d      	cmp	r1, #29
 80043e0:	d82c      	bhi.n	800443c <__sflush_r+0xb8>
 80043e2:	4a2a      	ldr	r2, [pc, #168]	; (800448c <__sflush_r+0x108>)
 80043e4:	40ca      	lsrs	r2, r1
 80043e6:	07d6      	lsls	r6, r2, #31
 80043e8:	d528      	bpl.n	800443c <__sflush_r+0xb8>
 80043ea:	2200      	movs	r2, #0
 80043ec:	6062      	str	r2, [r4, #4]
 80043ee:	04d9      	lsls	r1, r3, #19
 80043f0:	6922      	ldr	r2, [r4, #16]
 80043f2:	6022      	str	r2, [r4, #0]
 80043f4:	d504      	bpl.n	8004400 <__sflush_r+0x7c>
 80043f6:	1c42      	adds	r2, r0, #1
 80043f8:	d101      	bne.n	80043fe <__sflush_r+0x7a>
 80043fa:	682b      	ldr	r3, [r5, #0]
 80043fc:	b903      	cbnz	r3, 8004400 <__sflush_r+0x7c>
 80043fe:	6560      	str	r0, [r4, #84]	; 0x54
 8004400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004402:	602f      	str	r7, [r5, #0]
 8004404:	2900      	cmp	r1, #0
 8004406:	d0ca      	beq.n	800439e <__sflush_r+0x1a>
 8004408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800440c:	4299      	cmp	r1, r3
 800440e:	d002      	beq.n	8004416 <__sflush_r+0x92>
 8004410:	4628      	mov	r0, r5
 8004412:	f000 f9d5 	bl	80047c0 <_free_r>
 8004416:	2000      	movs	r0, #0
 8004418:	6360      	str	r0, [r4, #52]	; 0x34
 800441a:	e7c1      	b.n	80043a0 <__sflush_r+0x1c>
 800441c:	6a21      	ldr	r1, [r4, #32]
 800441e:	2301      	movs	r3, #1
 8004420:	4628      	mov	r0, r5
 8004422:	47b0      	blx	r6
 8004424:	1c41      	adds	r1, r0, #1
 8004426:	d1c7      	bne.n	80043b8 <__sflush_r+0x34>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0c4      	beq.n	80043b8 <__sflush_r+0x34>
 800442e:	2b1d      	cmp	r3, #29
 8004430:	d001      	beq.n	8004436 <__sflush_r+0xb2>
 8004432:	2b16      	cmp	r3, #22
 8004434:	d101      	bne.n	800443a <__sflush_r+0xb6>
 8004436:	602f      	str	r7, [r5, #0]
 8004438:	e7b1      	b.n	800439e <__sflush_r+0x1a>
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004440:	81a3      	strh	r3, [r4, #12]
 8004442:	e7ad      	b.n	80043a0 <__sflush_r+0x1c>
 8004444:	690f      	ldr	r7, [r1, #16]
 8004446:	2f00      	cmp	r7, #0
 8004448:	d0a9      	beq.n	800439e <__sflush_r+0x1a>
 800444a:	0793      	lsls	r3, r2, #30
 800444c:	680e      	ldr	r6, [r1, #0]
 800444e:	bf08      	it	eq
 8004450:	694b      	ldreq	r3, [r1, #20]
 8004452:	600f      	str	r7, [r1, #0]
 8004454:	bf18      	it	ne
 8004456:	2300      	movne	r3, #0
 8004458:	eba6 0807 	sub.w	r8, r6, r7
 800445c:	608b      	str	r3, [r1, #8]
 800445e:	f1b8 0f00 	cmp.w	r8, #0
 8004462:	dd9c      	ble.n	800439e <__sflush_r+0x1a>
 8004464:	6a21      	ldr	r1, [r4, #32]
 8004466:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004468:	4643      	mov	r3, r8
 800446a:	463a      	mov	r2, r7
 800446c:	4628      	mov	r0, r5
 800446e:	47b0      	blx	r6
 8004470:	2800      	cmp	r0, #0
 8004472:	dc06      	bgt.n	8004482 <__sflush_r+0xfe>
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800447a:	81a3      	strh	r3, [r4, #12]
 800447c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004480:	e78e      	b.n	80043a0 <__sflush_r+0x1c>
 8004482:	4407      	add	r7, r0
 8004484:	eba8 0800 	sub.w	r8, r8, r0
 8004488:	e7e9      	b.n	800445e <__sflush_r+0xda>
 800448a:	bf00      	nop
 800448c:	20400001 	.word	0x20400001

08004490 <_fflush_r>:
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	690b      	ldr	r3, [r1, #16]
 8004494:	4605      	mov	r5, r0
 8004496:	460c      	mov	r4, r1
 8004498:	b913      	cbnz	r3, 80044a0 <_fflush_r+0x10>
 800449a:	2500      	movs	r5, #0
 800449c:	4628      	mov	r0, r5
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	b118      	cbz	r0, 80044aa <_fflush_r+0x1a>
 80044a2:	6983      	ldr	r3, [r0, #24]
 80044a4:	b90b      	cbnz	r3, 80044aa <_fflush_r+0x1a>
 80044a6:	f000 f887 	bl	80045b8 <__sinit>
 80044aa:	4b14      	ldr	r3, [pc, #80]	; (80044fc <_fflush_r+0x6c>)
 80044ac:	429c      	cmp	r4, r3
 80044ae:	d11b      	bne.n	80044e8 <_fflush_r+0x58>
 80044b0:	686c      	ldr	r4, [r5, #4]
 80044b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0ef      	beq.n	800449a <_fflush_r+0xa>
 80044ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044bc:	07d0      	lsls	r0, r2, #31
 80044be:	d404      	bmi.n	80044ca <_fflush_r+0x3a>
 80044c0:	0599      	lsls	r1, r3, #22
 80044c2:	d402      	bmi.n	80044ca <_fflush_r+0x3a>
 80044c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044c6:	f000 f915 	bl	80046f4 <__retarget_lock_acquire_recursive>
 80044ca:	4628      	mov	r0, r5
 80044cc:	4621      	mov	r1, r4
 80044ce:	f7ff ff59 	bl	8004384 <__sflush_r>
 80044d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044d4:	07da      	lsls	r2, r3, #31
 80044d6:	4605      	mov	r5, r0
 80044d8:	d4e0      	bmi.n	800449c <_fflush_r+0xc>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	059b      	lsls	r3, r3, #22
 80044de:	d4dd      	bmi.n	800449c <_fflush_r+0xc>
 80044e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044e2:	f000 f908 	bl	80046f6 <__retarget_lock_release_recursive>
 80044e6:	e7d9      	b.n	800449c <_fflush_r+0xc>
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <_fflush_r+0x70>)
 80044ea:	429c      	cmp	r4, r3
 80044ec:	d101      	bne.n	80044f2 <_fflush_r+0x62>
 80044ee:	68ac      	ldr	r4, [r5, #8]
 80044f0:	e7df      	b.n	80044b2 <_fflush_r+0x22>
 80044f2:	4b04      	ldr	r3, [pc, #16]	; (8004504 <_fflush_r+0x74>)
 80044f4:	429c      	cmp	r4, r3
 80044f6:	bf08      	it	eq
 80044f8:	68ec      	ldreq	r4, [r5, #12]
 80044fa:	e7da      	b.n	80044b2 <_fflush_r+0x22>
 80044fc:	08004c1c 	.word	0x08004c1c
 8004500:	08004c3c 	.word	0x08004c3c
 8004504:	08004bfc 	.word	0x08004bfc

08004508 <std>:
 8004508:	2300      	movs	r3, #0
 800450a:	b510      	push	{r4, lr}
 800450c:	4604      	mov	r4, r0
 800450e:	e9c0 3300 	strd	r3, r3, [r0]
 8004512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004516:	6083      	str	r3, [r0, #8]
 8004518:	8181      	strh	r1, [r0, #12]
 800451a:	6643      	str	r3, [r0, #100]	; 0x64
 800451c:	81c2      	strh	r2, [r0, #14]
 800451e:	6183      	str	r3, [r0, #24]
 8004520:	4619      	mov	r1, r3
 8004522:	2208      	movs	r2, #8
 8004524:	305c      	adds	r0, #92	; 0x5c
 8004526:	f7ff fdef 	bl	8004108 <memset>
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <std+0x38>)
 800452c:	6263      	str	r3, [r4, #36]	; 0x24
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <std+0x3c>)
 8004530:	62a3      	str	r3, [r4, #40]	; 0x28
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <std+0x40>)
 8004534:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <std+0x44>)
 8004538:	6224      	str	r4, [r4, #32]
 800453a:	6323      	str	r3, [r4, #48]	; 0x30
 800453c:	bd10      	pop	{r4, pc}
 800453e:	bf00      	nop
 8004540:	08004931 	.word	0x08004931
 8004544:	08004953 	.word	0x08004953
 8004548:	0800498b 	.word	0x0800498b
 800454c:	080049af 	.word	0x080049af

08004550 <_cleanup_r>:
 8004550:	4901      	ldr	r1, [pc, #4]	; (8004558 <_cleanup_r+0x8>)
 8004552:	f000 b8af 	b.w	80046b4 <_fwalk_reent>
 8004556:	bf00      	nop
 8004558:	08004491 	.word	0x08004491

0800455c <__sfmoreglue>:
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	1e4a      	subs	r2, r1, #1
 8004560:	2568      	movs	r5, #104	; 0x68
 8004562:	4355      	muls	r5, r2
 8004564:	460e      	mov	r6, r1
 8004566:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800456a:	f000 f977 	bl	800485c <_malloc_r>
 800456e:	4604      	mov	r4, r0
 8004570:	b140      	cbz	r0, 8004584 <__sfmoreglue+0x28>
 8004572:	2100      	movs	r1, #0
 8004574:	e9c0 1600 	strd	r1, r6, [r0]
 8004578:	300c      	adds	r0, #12
 800457a:	60a0      	str	r0, [r4, #8]
 800457c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004580:	f7ff fdc2 	bl	8004108 <memset>
 8004584:	4620      	mov	r0, r4
 8004586:	bd70      	pop	{r4, r5, r6, pc}

08004588 <__sfp_lock_acquire>:
 8004588:	4801      	ldr	r0, [pc, #4]	; (8004590 <__sfp_lock_acquire+0x8>)
 800458a:	f000 b8b3 	b.w	80046f4 <__retarget_lock_acquire_recursive>
 800458e:	bf00      	nop
 8004590:	2000019c 	.word	0x2000019c

08004594 <__sfp_lock_release>:
 8004594:	4801      	ldr	r0, [pc, #4]	; (800459c <__sfp_lock_release+0x8>)
 8004596:	f000 b8ae 	b.w	80046f6 <__retarget_lock_release_recursive>
 800459a:	bf00      	nop
 800459c:	2000019c 	.word	0x2000019c

080045a0 <__sinit_lock_acquire>:
 80045a0:	4801      	ldr	r0, [pc, #4]	; (80045a8 <__sinit_lock_acquire+0x8>)
 80045a2:	f000 b8a7 	b.w	80046f4 <__retarget_lock_acquire_recursive>
 80045a6:	bf00      	nop
 80045a8:	20000197 	.word	0x20000197

080045ac <__sinit_lock_release>:
 80045ac:	4801      	ldr	r0, [pc, #4]	; (80045b4 <__sinit_lock_release+0x8>)
 80045ae:	f000 b8a2 	b.w	80046f6 <__retarget_lock_release_recursive>
 80045b2:	bf00      	nop
 80045b4:	20000197 	.word	0x20000197

080045b8 <__sinit>:
 80045b8:	b510      	push	{r4, lr}
 80045ba:	4604      	mov	r4, r0
 80045bc:	f7ff fff0 	bl	80045a0 <__sinit_lock_acquire>
 80045c0:	69a3      	ldr	r3, [r4, #24]
 80045c2:	b11b      	cbz	r3, 80045cc <__sinit+0x14>
 80045c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045c8:	f7ff bff0 	b.w	80045ac <__sinit_lock_release>
 80045cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045d0:	6523      	str	r3, [r4, #80]	; 0x50
 80045d2:	4b13      	ldr	r3, [pc, #76]	; (8004620 <__sinit+0x68>)
 80045d4:	4a13      	ldr	r2, [pc, #76]	; (8004624 <__sinit+0x6c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80045da:	42a3      	cmp	r3, r4
 80045dc:	bf04      	itt	eq
 80045de:	2301      	moveq	r3, #1
 80045e0:	61a3      	streq	r3, [r4, #24]
 80045e2:	4620      	mov	r0, r4
 80045e4:	f000 f820 	bl	8004628 <__sfp>
 80045e8:	6060      	str	r0, [r4, #4]
 80045ea:	4620      	mov	r0, r4
 80045ec:	f000 f81c 	bl	8004628 <__sfp>
 80045f0:	60a0      	str	r0, [r4, #8]
 80045f2:	4620      	mov	r0, r4
 80045f4:	f000 f818 	bl	8004628 <__sfp>
 80045f8:	2200      	movs	r2, #0
 80045fa:	60e0      	str	r0, [r4, #12]
 80045fc:	2104      	movs	r1, #4
 80045fe:	6860      	ldr	r0, [r4, #4]
 8004600:	f7ff ff82 	bl	8004508 <std>
 8004604:	68a0      	ldr	r0, [r4, #8]
 8004606:	2201      	movs	r2, #1
 8004608:	2109      	movs	r1, #9
 800460a:	f7ff ff7d 	bl	8004508 <std>
 800460e:	68e0      	ldr	r0, [r4, #12]
 8004610:	2202      	movs	r2, #2
 8004612:	2112      	movs	r1, #18
 8004614:	f7ff ff78 	bl	8004508 <std>
 8004618:	2301      	movs	r3, #1
 800461a:	61a3      	str	r3, [r4, #24]
 800461c:	e7d2      	b.n	80045c4 <__sinit+0xc>
 800461e:	bf00      	nop
 8004620:	08004bf8 	.word	0x08004bf8
 8004624:	08004551 	.word	0x08004551

08004628 <__sfp>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	4607      	mov	r7, r0
 800462c:	f7ff ffac 	bl	8004588 <__sfp_lock_acquire>
 8004630:	4b1e      	ldr	r3, [pc, #120]	; (80046ac <__sfp+0x84>)
 8004632:	681e      	ldr	r6, [r3, #0]
 8004634:	69b3      	ldr	r3, [r6, #24]
 8004636:	b913      	cbnz	r3, 800463e <__sfp+0x16>
 8004638:	4630      	mov	r0, r6
 800463a:	f7ff ffbd 	bl	80045b8 <__sinit>
 800463e:	3648      	adds	r6, #72	; 0x48
 8004640:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004644:	3b01      	subs	r3, #1
 8004646:	d503      	bpl.n	8004650 <__sfp+0x28>
 8004648:	6833      	ldr	r3, [r6, #0]
 800464a:	b30b      	cbz	r3, 8004690 <__sfp+0x68>
 800464c:	6836      	ldr	r6, [r6, #0]
 800464e:	e7f7      	b.n	8004640 <__sfp+0x18>
 8004650:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004654:	b9d5      	cbnz	r5, 800468c <__sfp+0x64>
 8004656:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <__sfp+0x88>)
 8004658:	60e3      	str	r3, [r4, #12]
 800465a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800465e:	6665      	str	r5, [r4, #100]	; 0x64
 8004660:	f000 f847 	bl	80046f2 <__retarget_lock_init_recursive>
 8004664:	f7ff ff96 	bl	8004594 <__sfp_lock_release>
 8004668:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800466c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004670:	6025      	str	r5, [r4, #0]
 8004672:	61a5      	str	r5, [r4, #24]
 8004674:	2208      	movs	r2, #8
 8004676:	4629      	mov	r1, r5
 8004678:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800467c:	f7ff fd44 	bl	8004108 <memset>
 8004680:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004684:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004688:	4620      	mov	r0, r4
 800468a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800468c:	3468      	adds	r4, #104	; 0x68
 800468e:	e7d9      	b.n	8004644 <__sfp+0x1c>
 8004690:	2104      	movs	r1, #4
 8004692:	4638      	mov	r0, r7
 8004694:	f7ff ff62 	bl	800455c <__sfmoreglue>
 8004698:	4604      	mov	r4, r0
 800469a:	6030      	str	r0, [r6, #0]
 800469c:	2800      	cmp	r0, #0
 800469e:	d1d5      	bne.n	800464c <__sfp+0x24>
 80046a0:	f7ff ff78 	bl	8004594 <__sfp_lock_release>
 80046a4:	230c      	movs	r3, #12
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	e7ee      	b.n	8004688 <__sfp+0x60>
 80046aa:	bf00      	nop
 80046ac:	08004bf8 	.word	0x08004bf8
 80046b0:	ffff0001 	.word	0xffff0001

080046b4 <_fwalk_reent>:
 80046b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046b8:	4606      	mov	r6, r0
 80046ba:	4688      	mov	r8, r1
 80046bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046c0:	2700      	movs	r7, #0
 80046c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046c6:	f1b9 0901 	subs.w	r9, r9, #1
 80046ca:	d505      	bpl.n	80046d8 <_fwalk_reent+0x24>
 80046cc:	6824      	ldr	r4, [r4, #0]
 80046ce:	2c00      	cmp	r4, #0
 80046d0:	d1f7      	bne.n	80046c2 <_fwalk_reent+0xe>
 80046d2:	4638      	mov	r0, r7
 80046d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046d8:	89ab      	ldrh	r3, [r5, #12]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d907      	bls.n	80046ee <_fwalk_reent+0x3a>
 80046de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046e2:	3301      	adds	r3, #1
 80046e4:	d003      	beq.n	80046ee <_fwalk_reent+0x3a>
 80046e6:	4629      	mov	r1, r5
 80046e8:	4630      	mov	r0, r6
 80046ea:	47c0      	blx	r8
 80046ec:	4307      	orrs	r7, r0
 80046ee:	3568      	adds	r5, #104	; 0x68
 80046f0:	e7e9      	b.n	80046c6 <_fwalk_reent+0x12>

080046f2 <__retarget_lock_init_recursive>:
 80046f2:	4770      	bx	lr

080046f4 <__retarget_lock_acquire_recursive>:
 80046f4:	4770      	bx	lr

080046f6 <__retarget_lock_release_recursive>:
 80046f6:	4770      	bx	lr

080046f8 <__swhatbuf_r>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	460e      	mov	r6, r1
 80046fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004700:	2900      	cmp	r1, #0
 8004702:	b096      	sub	sp, #88	; 0x58
 8004704:	4614      	mov	r4, r2
 8004706:	461d      	mov	r5, r3
 8004708:	da07      	bge.n	800471a <__swhatbuf_r+0x22>
 800470a:	2300      	movs	r3, #0
 800470c:	602b      	str	r3, [r5, #0]
 800470e:	89b3      	ldrh	r3, [r6, #12]
 8004710:	061a      	lsls	r2, r3, #24
 8004712:	d410      	bmi.n	8004736 <__swhatbuf_r+0x3e>
 8004714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004718:	e00e      	b.n	8004738 <__swhatbuf_r+0x40>
 800471a:	466a      	mov	r2, sp
 800471c:	f000 f96e 	bl	80049fc <_fstat_r>
 8004720:	2800      	cmp	r0, #0
 8004722:	dbf2      	blt.n	800470a <__swhatbuf_r+0x12>
 8004724:	9a01      	ldr	r2, [sp, #4]
 8004726:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800472a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800472e:	425a      	negs	r2, r3
 8004730:	415a      	adcs	r2, r3
 8004732:	602a      	str	r2, [r5, #0]
 8004734:	e7ee      	b.n	8004714 <__swhatbuf_r+0x1c>
 8004736:	2340      	movs	r3, #64	; 0x40
 8004738:	2000      	movs	r0, #0
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	b016      	add	sp, #88	; 0x58
 800473e:	bd70      	pop	{r4, r5, r6, pc}

08004740 <__smakebuf_r>:
 8004740:	898b      	ldrh	r3, [r1, #12]
 8004742:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004744:	079d      	lsls	r5, r3, #30
 8004746:	4606      	mov	r6, r0
 8004748:	460c      	mov	r4, r1
 800474a:	d507      	bpl.n	800475c <__smakebuf_r+0x1c>
 800474c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	6123      	str	r3, [r4, #16]
 8004754:	2301      	movs	r3, #1
 8004756:	6163      	str	r3, [r4, #20]
 8004758:	b002      	add	sp, #8
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	ab01      	add	r3, sp, #4
 800475e:	466a      	mov	r2, sp
 8004760:	f7ff ffca 	bl	80046f8 <__swhatbuf_r>
 8004764:	9900      	ldr	r1, [sp, #0]
 8004766:	4605      	mov	r5, r0
 8004768:	4630      	mov	r0, r6
 800476a:	f000 f877 	bl	800485c <_malloc_r>
 800476e:	b948      	cbnz	r0, 8004784 <__smakebuf_r+0x44>
 8004770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004774:	059a      	lsls	r2, r3, #22
 8004776:	d4ef      	bmi.n	8004758 <__smakebuf_r+0x18>
 8004778:	f023 0303 	bic.w	r3, r3, #3
 800477c:	f043 0302 	orr.w	r3, r3, #2
 8004780:	81a3      	strh	r3, [r4, #12]
 8004782:	e7e3      	b.n	800474c <__smakebuf_r+0xc>
 8004784:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <__smakebuf_r+0x7c>)
 8004786:	62b3      	str	r3, [r6, #40]	; 0x28
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	6020      	str	r0, [r4, #0]
 800478c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	9b00      	ldr	r3, [sp, #0]
 8004794:	6163      	str	r3, [r4, #20]
 8004796:	9b01      	ldr	r3, [sp, #4]
 8004798:	6120      	str	r0, [r4, #16]
 800479a:	b15b      	cbz	r3, 80047b4 <__smakebuf_r+0x74>
 800479c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047a0:	4630      	mov	r0, r6
 80047a2:	f000 f93d 	bl	8004a20 <_isatty_r>
 80047a6:	b128      	cbz	r0, 80047b4 <__smakebuf_r+0x74>
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	f023 0303 	bic.w	r3, r3, #3
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	81a3      	strh	r3, [r4, #12]
 80047b4:	89a0      	ldrh	r0, [r4, #12]
 80047b6:	4305      	orrs	r5, r0
 80047b8:	81a5      	strh	r5, [r4, #12]
 80047ba:	e7cd      	b.n	8004758 <__smakebuf_r+0x18>
 80047bc:	08004551 	.word	0x08004551

080047c0 <_free_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4605      	mov	r5, r0
 80047c4:	2900      	cmp	r1, #0
 80047c6:	d045      	beq.n	8004854 <_free_r+0x94>
 80047c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047cc:	1f0c      	subs	r4, r1, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bfb8      	it	lt
 80047d2:	18e4      	addlt	r4, r4, r3
 80047d4:	f000 f946 	bl	8004a64 <__malloc_lock>
 80047d8:	4a1f      	ldr	r2, [pc, #124]	; (8004858 <_free_r+0x98>)
 80047da:	6813      	ldr	r3, [r2, #0]
 80047dc:	4610      	mov	r0, r2
 80047de:	b933      	cbnz	r3, 80047ee <_free_r+0x2e>
 80047e0:	6063      	str	r3, [r4, #4]
 80047e2:	6014      	str	r4, [r2, #0]
 80047e4:	4628      	mov	r0, r5
 80047e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047ea:	f000 b941 	b.w	8004a70 <__malloc_unlock>
 80047ee:	42a3      	cmp	r3, r4
 80047f0:	d90b      	bls.n	800480a <_free_r+0x4a>
 80047f2:	6821      	ldr	r1, [r4, #0]
 80047f4:	1862      	adds	r2, r4, r1
 80047f6:	4293      	cmp	r3, r2
 80047f8:	bf04      	itt	eq
 80047fa:	681a      	ldreq	r2, [r3, #0]
 80047fc:	685b      	ldreq	r3, [r3, #4]
 80047fe:	6063      	str	r3, [r4, #4]
 8004800:	bf04      	itt	eq
 8004802:	1852      	addeq	r2, r2, r1
 8004804:	6022      	streq	r2, [r4, #0]
 8004806:	6004      	str	r4, [r0, #0]
 8004808:	e7ec      	b.n	80047e4 <_free_r+0x24>
 800480a:	461a      	mov	r2, r3
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	b10b      	cbz	r3, 8004814 <_free_r+0x54>
 8004810:	42a3      	cmp	r3, r4
 8004812:	d9fa      	bls.n	800480a <_free_r+0x4a>
 8004814:	6811      	ldr	r1, [r2, #0]
 8004816:	1850      	adds	r0, r2, r1
 8004818:	42a0      	cmp	r0, r4
 800481a:	d10b      	bne.n	8004834 <_free_r+0x74>
 800481c:	6820      	ldr	r0, [r4, #0]
 800481e:	4401      	add	r1, r0
 8004820:	1850      	adds	r0, r2, r1
 8004822:	4283      	cmp	r3, r0
 8004824:	6011      	str	r1, [r2, #0]
 8004826:	d1dd      	bne.n	80047e4 <_free_r+0x24>
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	6053      	str	r3, [r2, #4]
 800482e:	4401      	add	r1, r0
 8004830:	6011      	str	r1, [r2, #0]
 8004832:	e7d7      	b.n	80047e4 <_free_r+0x24>
 8004834:	d902      	bls.n	800483c <_free_r+0x7c>
 8004836:	230c      	movs	r3, #12
 8004838:	602b      	str	r3, [r5, #0]
 800483a:	e7d3      	b.n	80047e4 <_free_r+0x24>
 800483c:	6820      	ldr	r0, [r4, #0]
 800483e:	1821      	adds	r1, r4, r0
 8004840:	428b      	cmp	r3, r1
 8004842:	bf04      	itt	eq
 8004844:	6819      	ldreq	r1, [r3, #0]
 8004846:	685b      	ldreq	r3, [r3, #4]
 8004848:	6063      	str	r3, [r4, #4]
 800484a:	bf04      	itt	eq
 800484c:	1809      	addeq	r1, r1, r0
 800484e:	6021      	streq	r1, [r4, #0]
 8004850:	6054      	str	r4, [r2, #4]
 8004852:	e7c7      	b.n	80047e4 <_free_r+0x24>
 8004854:	bd38      	pop	{r3, r4, r5, pc}
 8004856:	bf00      	nop
 8004858:	200000f4 	.word	0x200000f4

0800485c <_malloc_r>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	1ccd      	adds	r5, r1, #3
 8004860:	f025 0503 	bic.w	r5, r5, #3
 8004864:	3508      	adds	r5, #8
 8004866:	2d0c      	cmp	r5, #12
 8004868:	bf38      	it	cc
 800486a:	250c      	movcc	r5, #12
 800486c:	2d00      	cmp	r5, #0
 800486e:	4606      	mov	r6, r0
 8004870:	db01      	blt.n	8004876 <_malloc_r+0x1a>
 8004872:	42a9      	cmp	r1, r5
 8004874:	d903      	bls.n	800487e <_malloc_r+0x22>
 8004876:	230c      	movs	r3, #12
 8004878:	6033      	str	r3, [r6, #0]
 800487a:	2000      	movs	r0, #0
 800487c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800487e:	f000 f8f1 	bl	8004a64 <__malloc_lock>
 8004882:	4921      	ldr	r1, [pc, #132]	; (8004908 <_malloc_r+0xac>)
 8004884:	680a      	ldr	r2, [r1, #0]
 8004886:	4614      	mov	r4, r2
 8004888:	b99c      	cbnz	r4, 80048b2 <_malloc_r+0x56>
 800488a:	4f20      	ldr	r7, [pc, #128]	; (800490c <_malloc_r+0xb0>)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	b923      	cbnz	r3, 800489a <_malloc_r+0x3e>
 8004890:	4621      	mov	r1, r4
 8004892:	4630      	mov	r0, r6
 8004894:	f000 f83c 	bl	8004910 <_sbrk_r>
 8004898:	6038      	str	r0, [r7, #0]
 800489a:	4629      	mov	r1, r5
 800489c:	4630      	mov	r0, r6
 800489e:	f000 f837 	bl	8004910 <_sbrk_r>
 80048a2:	1c43      	adds	r3, r0, #1
 80048a4:	d123      	bne.n	80048ee <_malloc_r+0x92>
 80048a6:	230c      	movs	r3, #12
 80048a8:	6033      	str	r3, [r6, #0]
 80048aa:	4630      	mov	r0, r6
 80048ac:	f000 f8e0 	bl	8004a70 <__malloc_unlock>
 80048b0:	e7e3      	b.n	800487a <_malloc_r+0x1e>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	1b5b      	subs	r3, r3, r5
 80048b6:	d417      	bmi.n	80048e8 <_malloc_r+0x8c>
 80048b8:	2b0b      	cmp	r3, #11
 80048ba:	d903      	bls.n	80048c4 <_malloc_r+0x68>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	441c      	add	r4, r3
 80048c0:	6025      	str	r5, [r4, #0]
 80048c2:	e004      	b.n	80048ce <_malloc_r+0x72>
 80048c4:	6863      	ldr	r3, [r4, #4]
 80048c6:	42a2      	cmp	r2, r4
 80048c8:	bf0c      	ite	eq
 80048ca:	600b      	streq	r3, [r1, #0]
 80048cc:	6053      	strne	r3, [r2, #4]
 80048ce:	4630      	mov	r0, r6
 80048d0:	f000 f8ce 	bl	8004a70 <__malloc_unlock>
 80048d4:	f104 000b 	add.w	r0, r4, #11
 80048d8:	1d23      	adds	r3, r4, #4
 80048da:	f020 0007 	bic.w	r0, r0, #7
 80048de:	1ac2      	subs	r2, r0, r3
 80048e0:	d0cc      	beq.n	800487c <_malloc_r+0x20>
 80048e2:	1a1b      	subs	r3, r3, r0
 80048e4:	50a3      	str	r3, [r4, r2]
 80048e6:	e7c9      	b.n	800487c <_malloc_r+0x20>
 80048e8:	4622      	mov	r2, r4
 80048ea:	6864      	ldr	r4, [r4, #4]
 80048ec:	e7cc      	b.n	8004888 <_malloc_r+0x2c>
 80048ee:	1cc4      	adds	r4, r0, #3
 80048f0:	f024 0403 	bic.w	r4, r4, #3
 80048f4:	42a0      	cmp	r0, r4
 80048f6:	d0e3      	beq.n	80048c0 <_malloc_r+0x64>
 80048f8:	1a21      	subs	r1, r4, r0
 80048fa:	4630      	mov	r0, r6
 80048fc:	f000 f808 	bl	8004910 <_sbrk_r>
 8004900:	3001      	adds	r0, #1
 8004902:	d1dd      	bne.n	80048c0 <_malloc_r+0x64>
 8004904:	e7cf      	b.n	80048a6 <_malloc_r+0x4a>
 8004906:	bf00      	nop
 8004908:	200000f4 	.word	0x200000f4
 800490c:	200000f8 	.word	0x200000f8

08004910 <_sbrk_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4d06      	ldr	r5, [pc, #24]	; (800492c <_sbrk_r+0x1c>)
 8004914:	2300      	movs	r3, #0
 8004916:	4604      	mov	r4, r0
 8004918:	4608      	mov	r0, r1
 800491a:	602b      	str	r3, [r5, #0]
 800491c:	f7fc f876 	bl	8000a0c <_sbrk>
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	d102      	bne.n	800492a <_sbrk_r+0x1a>
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	b103      	cbz	r3, 800492a <_sbrk_r+0x1a>
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	bd38      	pop	{r3, r4, r5, pc}
 800492c:	200001a0 	.word	0x200001a0

08004930 <__sread>:
 8004930:	b510      	push	{r4, lr}
 8004932:	460c      	mov	r4, r1
 8004934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004938:	f000 f8a0 	bl	8004a7c <_read_r>
 800493c:	2800      	cmp	r0, #0
 800493e:	bfab      	itete	ge
 8004940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004942:	89a3      	ldrhlt	r3, [r4, #12]
 8004944:	181b      	addge	r3, r3, r0
 8004946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800494a:	bfac      	ite	ge
 800494c:	6563      	strge	r3, [r4, #84]	; 0x54
 800494e:	81a3      	strhlt	r3, [r4, #12]
 8004950:	bd10      	pop	{r4, pc}

08004952 <__swrite>:
 8004952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004956:	461f      	mov	r7, r3
 8004958:	898b      	ldrh	r3, [r1, #12]
 800495a:	05db      	lsls	r3, r3, #23
 800495c:	4605      	mov	r5, r0
 800495e:	460c      	mov	r4, r1
 8004960:	4616      	mov	r6, r2
 8004962:	d505      	bpl.n	8004970 <__swrite+0x1e>
 8004964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004968:	2302      	movs	r3, #2
 800496a:	2200      	movs	r2, #0
 800496c:	f000 f868 	bl	8004a40 <_lseek_r>
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800497a:	81a3      	strh	r3, [r4, #12]
 800497c:	4632      	mov	r2, r6
 800497e:	463b      	mov	r3, r7
 8004980:	4628      	mov	r0, r5
 8004982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004986:	f000 b817 	b.w	80049b8 <_write_r>

0800498a <__sseek>:
 800498a:	b510      	push	{r4, lr}
 800498c:	460c      	mov	r4, r1
 800498e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004992:	f000 f855 	bl	8004a40 <_lseek_r>
 8004996:	1c43      	adds	r3, r0, #1
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	bf15      	itete	ne
 800499c:	6560      	strne	r0, [r4, #84]	; 0x54
 800499e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049a6:	81a3      	strheq	r3, [r4, #12]
 80049a8:	bf18      	it	ne
 80049aa:	81a3      	strhne	r3, [r4, #12]
 80049ac:	bd10      	pop	{r4, pc}

080049ae <__sclose>:
 80049ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b2:	f000 b813 	b.w	80049dc <_close_r>
	...

080049b8 <_write_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	4d07      	ldr	r5, [pc, #28]	; (80049d8 <_write_r+0x20>)
 80049bc:	4604      	mov	r4, r0
 80049be:	4608      	mov	r0, r1
 80049c0:	4611      	mov	r1, r2
 80049c2:	2200      	movs	r2, #0
 80049c4:	602a      	str	r2, [r5, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	f7fb ffd4 	bl	8000974 <_write>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	d102      	bne.n	80049d6 <_write_r+0x1e>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	b103      	cbz	r3, 80049d6 <_write_r+0x1e>
 80049d4:	6023      	str	r3, [r4, #0]
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
 80049d8:	200001a0 	.word	0x200001a0

080049dc <_close_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4d06      	ldr	r5, [pc, #24]	; (80049f8 <_close_r+0x1c>)
 80049e0:	2300      	movs	r3, #0
 80049e2:	4604      	mov	r4, r0
 80049e4:	4608      	mov	r0, r1
 80049e6:	602b      	str	r3, [r5, #0]
 80049e8:	f7fb ffe0 	bl	80009ac <_close>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d102      	bne.n	80049f6 <_close_r+0x1a>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	b103      	cbz	r3, 80049f6 <_close_r+0x1a>
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	200001a0 	.word	0x200001a0

080049fc <_fstat_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	4d07      	ldr	r5, [pc, #28]	; (8004a1c <_fstat_r+0x20>)
 8004a00:	2300      	movs	r3, #0
 8004a02:	4604      	mov	r4, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	602b      	str	r3, [r5, #0]
 8004a0a:	f7fb ffda 	bl	80009c2 <_fstat>
 8004a0e:	1c43      	adds	r3, r0, #1
 8004a10:	d102      	bne.n	8004a18 <_fstat_r+0x1c>
 8004a12:	682b      	ldr	r3, [r5, #0]
 8004a14:	b103      	cbz	r3, 8004a18 <_fstat_r+0x1c>
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	bd38      	pop	{r3, r4, r5, pc}
 8004a1a:	bf00      	nop
 8004a1c:	200001a0 	.word	0x200001a0

08004a20 <_isatty_r>:
 8004a20:	b538      	push	{r3, r4, r5, lr}
 8004a22:	4d06      	ldr	r5, [pc, #24]	; (8004a3c <_isatty_r+0x1c>)
 8004a24:	2300      	movs	r3, #0
 8004a26:	4604      	mov	r4, r0
 8004a28:	4608      	mov	r0, r1
 8004a2a:	602b      	str	r3, [r5, #0]
 8004a2c:	f7fb ffd8 	bl	80009e0 <_isatty>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <_isatty_r+0x1a>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b103      	cbz	r3, 8004a3a <_isatty_r+0x1a>
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	200001a0 	.word	0x200001a0

08004a40 <_lseek_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	4d07      	ldr	r5, [pc, #28]	; (8004a60 <_lseek_r+0x20>)
 8004a44:	4604      	mov	r4, r0
 8004a46:	4608      	mov	r0, r1
 8004a48:	4611      	mov	r1, r2
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	602a      	str	r2, [r5, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f7fb ffd0 	bl	80009f4 <_lseek>
 8004a54:	1c43      	adds	r3, r0, #1
 8004a56:	d102      	bne.n	8004a5e <_lseek_r+0x1e>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	b103      	cbz	r3, 8004a5e <_lseek_r+0x1e>
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
 8004a60:	200001a0 	.word	0x200001a0

08004a64 <__malloc_lock>:
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <__malloc_lock+0x8>)
 8004a66:	f7ff be45 	b.w	80046f4 <__retarget_lock_acquire_recursive>
 8004a6a:	bf00      	nop
 8004a6c:	20000198 	.word	0x20000198

08004a70 <__malloc_unlock>:
 8004a70:	4801      	ldr	r0, [pc, #4]	; (8004a78 <__malloc_unlock+0x8>)
 8004a72:	f7ff be40 	b.w	80046f6 <__retarget_lock_release_recursive>
 8004a76:	bf00      	nop
 8004a78:	20000198 	.word	0x20000198

08004a7c <_read_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4d07      	ldr	r5, [pc, #28]	; (8004a9c <_read_r+0x20>)
 8004a80:	4604      	mov	r4, r0
 8004a82:	4608      	mov	r0, r1
 8004a84:	4611      	mov	r1, r2
 8004a86:	2200      	movs	r2, #0
 8004a88:	602a      	str	r2, [r5, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	f7fb ff55 	bl	800093a <_read>
 8004a90:	1c43      	adds	r3, r0, #1
 8004a92:	d102      	bne.n	8004a9a <_read_r+0x1e>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	b103      	cbz	r3, 8004a9a <_read_r+0x1e>
 8004a98:	6023      	str	r3, [r4, #0]
 8004a9a:	bd38      	pop	{r3, r4, r5, pc}
 8004a9c:	200001a0 	.word	0x200001a0

08004aa0 <_init>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	bf00      	nop
 8004aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa6:	bc08      	pop	{r3}
 8004aa8:	469e      	mov	lr, r3
 8004aaa:	4770      	bx	lr

08004aac <_fini>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr
